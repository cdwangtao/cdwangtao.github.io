<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win10 shift+鼠标右键 cmd变成powershell，改回显示cmd</title>
      <link href="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/"/>
      <url>/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="1-win10-shift鼠标右键-cmd变成powershell，改回显示cmd"><a href="#1-win10-shift鼠标右键-cmd变成powershell，改回显示cmd" class="headerlink" title="1. win10 shift鼠标右键 cmd变成powershell，改回显示cmd"></a>1. win10 shift鼠标右键 cmd变成powershell，改回显示cmd</h2><ol><li>第一步：打开注册表编辑器  win+R 输入 regedit</li><li><p>第二步：找到“计算机\HKEY_CLASSES_ROOT\Directory\Background\shell”</p></li><li><p>第三步：找到cmd，右键权限，管理员权限设置为“完全控制”</p></li></ol><ul><li>“HideBasedOnVelocityId”重命名“ShowBasedOnVelocityId”，即显示在shift右键菜单中</li><li>同理：找到Powershell，右键权限，管理员权限设置为“完全控制”</li><li>“ShowBasedOnVelocityId”重命名“HideBasedOnVelocityId”，即隐藏在shift右键菜单中</li></ul><h3 id="1-1-显示cmd-reg"><a href="#1-1-显示cmd-reg" class="headerlink" title="1.1 显示cmd.reg"></a>1.1 显示cmd.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\cmd]@="@shell32.dll,-8506""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=-"ShowBasedOnVelocityId"=dword:00639bc8</code></pre><h3 id="1-2-隐藏Powershell"><a href="#1-2-隐藏Powershell" class="headerlink" title="1.2 隐藏Powershell"></a>1.2 隐藏Powershell</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell]@="@shell32.dll,-8508""Extended"="""HideBasedOnVelocityId"=dword:00639bc8"ShowBasedOnVelocityId"=-</code></pre><h3 id="1-3-改回默认配置-隐藏cmd-reg"><a href="#1-3-改回默认配置-隐藏cmd-reg" class="headerlink" title="1.3 改回默认配置-隐藏cmd.reg"></a>1.3 改回默认配置-隐藏cmd.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\cmd]@="@shell32.dll,-8506""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=dword:00639bc8"ShowBasedOnVelocityId"=-</code></pre><h3 id="1-4-改回默认配置-显示Powershell-reg"><a href="#1-4-改回默认配置-显示Powershell-reg" class="headerlink" title="1.4 改回默认配置-显示Powershell.reg"></a>1.4 改回默认配置-显示Powershell.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell]@="@shell32.dll,-8508""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=-"ShowBasedOnVelocityId"=dword:00639bc8</code></pre><h2 id="2-操作中的步骤"><a href="#2-操作中的步骤" class="headerlink" title="2. 操作中的步骤"></a>2. 操作中的步骤</h2><h3 id="第一步-打开注册表编辑器"><a href="#第一步-打开注册表编辑器" class="headerlink" title="第一步 打开注册表编辑器"></a>第一步 打开注册表编辑器</h3><ul><li>“Win + R” 打开快速启动窗口 </li><li>输入 regedit 确定打开注册表编辑器</li></ul><h3 id="找到对应的注册表项"><a href="#找到对应的注册表项" class="headerlink" title="找到对应的注册表项"></a>找到对应的注册表项</h3><ul><li>在注册表路径输入<code>HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell</code>快速定位到注册表项</li></ul><p><img src="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/1557199409413.png" alt="1557199409413"></p><ul><li>修改权限：</li></ul><h2 id="3-开始按钮-Win键-X-默认修改"><a href="#3-开始按钮-Win键-X-默认修改" class="headerlink" title="3.开始按钮 Win键+X 默认修改"></a>3.开始按钮 Win键+X 默认修改</h2><p>从Win10 Build 14971开始，微软就开始将Powershell取代CMD成为主命令Shell，取代的决心非常显著，但微软也提供了折衷的解决方案，通过“设置——个性化——任务栏”，关闭以下功能即可回到此前状态。但在最新的版本中，目前该选项只能控制右击开始按钮的功能选项，无法还原右键菜单，所以感到不习惯的朋友不妨参照以上方法设置下。</p><p><img src="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/1557199097206.png" alt="1557199097206"></p><h2 id="4-修改注册表-添加“在此处打开命令行窗口-管理员-”"><a href="#4-修改注册表-添加“在此处打开命令行窗口-管理员-”" class="headerlink" title="4. 修改注册表 添加“在此处打开命令行窗口(管理员)”"></a>4. 修改注册表 添加“在此处打开命令行窗口(管理员)”</h2><pre class=" language-shell"><code class="language-shell">cmd.exe /s /k pushd "%V"</code></pre><p>参考：</p><p>win10 —- 文件夹右键打开cmd，管理员或非管理员（默认管理员权限打开cmd且已切换好路径）</p><p><a href="https://blog.csdn.net/shijianduan1/article/details/82884505" target="_blank" rel="noopener">https://blog.csdn.net/shijianduan1/article/details/82884505</a></p><p>Win10添加右键打开cmd和Powershell窗口（管理员/非管理员）</p><p><a href="https://blog.csdn.net/cxrsdn/article/details/84538767" target="_blank" rel="noopener">https://blog.csdn.net/cxrsdn/article/details/84538767</a></p><p><a href="https://blog.csdn.net/huanghenghua/article/details/80199673" target="_blank" rel="noopener">https://blog.csdn.net/huanghenghua/article/details/80199673</a></p><p><a href="https://www.cnblogs.com/ssooking/p/8536468.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssooking/p/8536468.html</a></p><p>HideBasedOnVelocityId</p><p>ShowBasedOnVelocityId</p><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\runas]@="在此处打开命令行窗口(管理员)""Extended"="""NoWorkingDirectory"="""ShowBasedOnVelocityId"=dword:00639bc8[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""</code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3.0 初体验</title>
      <link href="/2019/05/05/qian-duan/vue-cli3/"/>
      <url>/2019/05/05/qian-duan/vue-cli3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">官方介绍</a>:</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell"># 1.旧版本Vue CLI 的包名称由 `vue-cli` 改成了 `@vue/cli`。 如果你已经全局安装了旧版本的 `vue-cli`(1.x 或 2.x)，你需要先通过 `npm uninstall vue-cli -g` 或 `yarn global remove vue-cli` 卸载它。# Node 版本要求Vue CLI 需要 [Node.js](https://nodejs.org/) 8.9 或更高版本 (推荐 8.11.0+)。# 可以使用下列任一命令安装这个新的包：npm install -g @vue/cli# ORyarn global add @vue/cli# 检查其版本vue --versionvue -V# 查看当前已安装版本、查看最新版本vue --versionvue -V# npm 查看模块全部版本：npm show @vue/clinpm show @vue/cli versionsnpm info @vue/cli versionsnpm view @vue/cli versions# 安装指定版本:npm install -g @vue/clinpm install -g @vue/cli@3.7.0</code></pre><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目:"></a>创建项目:</h2><h3 id="1-命令行创建"><a href="#1-命令行创建" class="headerlink" title="1.命令行创建"></a>1.命令行创建</h3><pre class=" language-shell"><code class="language-shell">vue create my-vue-cli3</code></pre><h3 id="2-选择模板"><a href="#2-选择模板" class="headerlink" title="2.选择模板"></a>2.选择模板</h3><ul><li>一开始只有两个选项: default (默认配置)和 Manually select features (手动配置) </li><li>在每次选择手动配置之后，会询问你是否保存配置，保存后，以后我们在进行创建项目的时候 只需使用原先的配置 就可以了，而不用再进行配置。</li></ul><pre class=" language-shell"><code class="language-shell">Vue CLI v3.7.0? Please pick a preset: (Use arrow keys)> default (babel, eslint)  Manually select features</code></pre><p>这里选手动</p><h3 id="3-选择配置"><a href="#3-选择配置" class="headerlink" title="3.选择配置"></a>3.选择配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检查项目所需的功能:(按&lt;space>选择，&lt;a>切换所有，&lt;i>反转选择）</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Babel <span class="token punctuation">(</span> <span class="token punctuation">)</span> TypeScript  <span class="token comment" spellcheck="true">// 支持使用 TypeScript 书写源码</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Progressive Web App <span class="token punctuation">(</span>PWA<span class="token punctuation">)</span> Support  <span class="token comment" spellcheck="true">// PWA 支持</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Router      <span class="token comment" spellcheck="true">// 支持 vue-router</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Vuex        <span class="token comment" spellcheck="true">// 支持 vuex</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> CSS Pre<span class="token operator">-</span>processors  <span class="token comment" spellcheck="true">// 支持 CSS 预处理器。</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Linter <span class="token operator">/</span> Formatter  <span class="token comment" spellcheck="true">// 支持代码风格检查和格式化</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Unit Testing  <span class="token comment" spellcheck="true">// 支持单元测试</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> E2E Testing</code></pre><ul><li>选择：Babel+Router+Vuex+CSS Pre-processors+Linter / Formatter+Unit Testing</li></ul><h3 id="4-是否使用路由的-history-模式"><a href="#4-是否使用路由的-history-模式" class="headerlink" title="4.是否使用路由的 history 模式"></a>4.是否使用路由的 history 模式</h3><ul><li>这里我建议选No，这样打包出来丢到服务器上可以直接使用了，后期要用的话，也可以自己再开起来。</li><li>选yes的话需要服务器那边再进行设置。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> CSS Pre<span class="token operator">-</span>processors<span class="token punctuation">,</span> Linter<span class="token punctuation">,</span> Unit<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback <span class="token keyword">in</span> production<span class="token punctuation">)</span> <span class="token punctuation">(</span>Y<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由使用history模式?(在生产环境中需要适当的服务器设置以备索引)</span></code></pre><p>选择: no</p><h3 id="5-选择css预处理器"><a href="#5-选择css预处理器" class="headerlink" title="5.选择css预处理器"></a>5.选择css预处理器</h3><ul><li>如果你选择了Css预处理器选项，会让你选择这个</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a CSS pre<span class="token operator">-</span>processor <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and CSS Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择CSS预处理器（默认支持PostCSS，Autoprefixer和CSS模块）：</span><span class="token operator">></span> Sass<span class="token operator">/</span>SCSS <span class="token punctuation">(</span><span class="token keyword">with</span> dart<span class="token operator">-</span>sass<span class="token punctuation">)</span>  Sass<span class="token operator">/</span>SCSS <span class="token punctuation">(</span><span class="token keyword">with</span> node<span class="token operator">-</span>sass<span class="token punctuation">)</span>  Less  Stylus</code></pre><p>选择: Less</p><h3 id="6-选择Eslint代码验证规则"><a href="#6-选择Eslint代码验证规则" class="headerlink" title="6.选择Eslint代码验证规则"></a>6.选择Eslint代码验证规则</h3><p>选择Eslint代码验证规则：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a linter <span class="token operator">/</span> formatter config<span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> ESLint <span class="token keyword">with</span> error prevention only  ESLint <span class="token operator">+</span> Airbnb config  ESLint <span class="token operator">+</span> Standard config  ESLint <span class="token operator">+</span> Prettier</code></pre><p>ESLint + Standard config 或 默认</p><h3 id="7-选择什么时候进行代码规则检测"><a href="#7-选择什么时候进行代码规则检测" class="headerlink" title="7.选择什么时候进行代码规则检测"></a>7.选择什么时候进行代码规则检测</h3><ul><li>建议选保存就检测，等到commit的时候，问题可能都已经积累很多了。</li><li>之前写了篇 VsCode保存时自动修复Eslint错误 推荐一下。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick additional lint features<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Lint on save  <span class="token comment" spellcheck="true">// 保存就检测</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Lint and fix on commit <span class="token comment" spellcheck="true">// fix和commit时候检查</span></code></pre><h3 id="8-选择e2e测试"><a href="#8-选择e2e测试" class="headerlink" title="8.选择e2e测试"></a>8.选择e2e测试</h3><p>单元测试</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>e2e测试</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a E2E testing solution<span class="token punctuation">:</span><span class="token operator">></span> Cypress <span class="token punctuation">(</span>Chrome only<span class="token punctuation">)</span>  Nightwatch <span class="token punctuation">(</span>Selenium<span class="token operator">-</span>based<span class="token punctuation">)</span></code></pre><h3 id="9-把babel-postcss-eslint这些配置文件放哪"><a href="#9-把babel-postcss-eslint这些配置文件放哪" class="headerlink" title="9.把babel,postcss,eslint这些配置文件放哪"></a>9.把babel,postcss,eslint这些配置文件放哪</h3><ul><li>通常我们会选择独立放置，让package.json干净些</li></ul><blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">?</span> Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel<span class="token punctuation">,</span> PostCSS<span class="token punctuation">,</span> ESLint<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>? <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> In dedicated config files <span class="token comment" spellcheck="true">// 独立文件放置</span>  In <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">// 放package.json里</span></code></pre></blockquote><h3 id="10-是否保存配置"><a href="#10-是否保存配置" class="headerlink" title="10.是否保存配置"></a>10.是否保存配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Save <span class="token keyword">this</span> <span class="token keyword">as</span> a preset <span class="token keyword">for</span> future projects<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span>N<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 是否记录一下以便下次继续使用这套配置</span><span class="token comment" spellcheck="true">// 选保存之后，会让你写一个配置的名字：</span>Save preset <span class="token keyword">as</span><span class="token punctuation">:</span> name <span class="token comment" spellcheck="true">// 然后你下次进入配置可以直接使用你这次的配置了</span></code></pre><ol><li>下载依赖</li><li>webpack配置的目录不见了：</li></ol><p>会发现2.x的webpack配置的目录不见了，也就是没有build、config这两个文件夹了：</p><p>这种方式的优势 对小白来说非常友好 ，不会一上来就两个文件夹，一堆文件，看着脑袋都大了。</p><p>然后在 引用 抄 别人的配置的时候，也非常方便 ，直接将文件复制过来就好了。</p><p>在自定义一下webpack的配置，我们需要在 根目录新建一个 vue.config.js 文件 ，文件中应该导出一个对象，然后进行配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 选项...</span> <span class="token punctuation">}</span></code></pre><p>还有一些小变动像：static文件夹改为public了，router文件夹变成了单个文件之类的</p><h3 id="11-使用哪种包管理工具"><a href="#11-使用哪种包管理工具" class="headerlink" title="11.使用哪种包管理工具"></a>11.使用哪种包管理工具</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick the <span class="token keyword">package</span> manager to use when installing dependencies<span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> Use Yarn  Use NPM</code></pre><h3 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h3><p>启动项目：npm run serve // 不是之前的 npm run dev</p><h2 id="vue-cli不再纠结devDependencies与dependencies"><a href="#vue-cli不再纠结devDependencies与dependencies" class="headerlink" title="vue-cli不再纠结devDependencies与dependencies"></a>vue-cli不再纠结devDependencies与dependencies</h2><ul><li><p>以前一直在纠结一个npm安装的包依赖管理的问题。是这样的：</p><p>我们在使用npm install 安装模块或插件的时候，有两种命令把他们写入到 package.json 文件里面去，他们是：</p><p>–save-dev 或 –save</p><p>首先需要说明的是Dependencies一词的中文意思是依赖和附属的意思，而dev则是develop（开发）的简写。</p><p>所以它们的区别在 package.json 文件里面体现出来的就是，使用 –save-dev 安装的 插件，被写入到 devDependencies 域里面去，而使用 –save 安装的插件，则是被写入到 dependencies 区块里面去。</p></li><li><p>那 package.json 文件里面的 devDependencies  和 dependencies 对象有什么区别呢？</p><p>devDependencies  里面的插件只用于开发环境，不用于生产环境，而 dependencies  是需要发布到生产环境的。</p><p>比如我们写一个项目要依赖于jQuery，没有这个包的依赖运行就会报错，这时候就把这个依赖写入dependencies ；</p><p>而我们使用的一些构建工具比如glup、webpack这些只是在开发中使用的包，上线以</p><p>后就和他们没关系了，所以将它写入devDependencies。<br>-——————–<br>作者：zDeer的前端之旅<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/zdeer520/article/details/73431295" target="_blank" rel="noopener">https://blog.csdn.net/zdeer520/article/details/73431295 </a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p></li></ul><h2 id="项目常用配置"><a href="#项目常用配置" class="headerlink" title="项目常用配置"></a>项目常用配置</h2><h3 id="eslintrc-js-修改"><a href="#eslintrc-js-修改" class="headerlink" title=".eslintrc.js 修改"></a>.eslintrc.js 修改</h3><pre class=" language-java"><code class="language-java">  rules<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">'no-console'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'generator-star-spacing'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"semi"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 语句强制分号结尾</span>    <span class="token string">"space-before-function-paren"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"no-return-assign"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// return 语句中不能有赋值表达式</span>    <span class="token string">"one-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-dupe-keys"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-cond-assign"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-tabs"</span><span class="token operator">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-mixed-spaces-and-tabs"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//关闭 tabs与空格共同存在时的验证报错</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="vue-config-js-创建"><a href="#vue-config-js-创建" class="headerlink" title="vue.config.js 创建"></a>vue.config.js 创建</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'./'</span> <span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  outputDir<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span>  assetsDir<span class="token punctuation">:</span> <span class="token string">'assets'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用于放置生成的静态资源</span>  filenameHashing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设为false 来关闭文件名哈希</span>  pages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token punctuation">{</span>      entry<span class="token punctuation">:</span> <span class="token string">'src/main.js'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      title<span class="token punctuation">:</span> <span class="token string">'Index Page'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'chunk-vendors'</span><span class="token punctuation">,</span> <span class="token string">'chunk-common'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置自动启动浏览器   process.platform === 'darwin'</span>    hotOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// proxy: 'http://192.168.10.100:9000', // string | Object 配置跨越处理代理</span>    <span class="token comment" spellcheck="true">// proxy: {</span>    <span class="token comment" spellcheck="true">//   // arcgis js api代理 正式环境拷贝api到/dist/static/arcgis_js_api</span>    <span class="token comment" spellcheck="true">//   '/static/arcgis_js_api': {</span>    <span class="token comment" spellcheck="true">//     target: 'http://192.168.10.26:88',</span>    <span class="token comment" spellcheck="true">//     changeOrigin: true,</span>    <span class="token comment" spellcheck="true">//     pathRewrite: {</span>    <span class="token comment" spellcheck="true">//       '^/static/arcgis_js_api': '/arcgis_js_api' // 访问 /static/arcgis_js_api => http://192.168.10.26/arcgis_js_api</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//   },</span>    <span class="token comment" spellcheck="true">//   '/': {</span>    <span class="token comment" spellcheck="true">//     target: 'http://192.168.10.111:9000',</span>    <span class="token comment" spellcheck="true">//     // target: 'http://192.168.30.208:9000',</span>    <span class="token comment" spellcheck="true">//     changeOrigin: true,</span>    <span class="token comment" spellcheck="true">//     ws: false,</span>    <span class="token comment" spellcheck="true">//     pathRewrite: {</span>    <span class="token comment" spellcheck="true">//       '^/': ''</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//   }</span>    <span class="token comment" spellcheck="true">// },</span>    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>      warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      less<span class="token punctuation">:</span> <span class="token punctuation">{</span>        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 解决 webpack打包时报错提示：“Inline JavaScript is not enabled”</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>      extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">,</span> <span class="token string">'.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// '@: 'src';   // vue-cli3.0 默认配置</span>        store<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/store/modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        storejs<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'node_modules/store'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'src/styles'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 第三方插件配置</span>  pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  runtimeCompiler<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否使用包含运行时编译器的 Vue 构建版本</span>  lintOnSave<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token comment" spellcheck="true">// 在生产构建时禁用 eslint-loader</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="使用-pug"><a href="#使用-pug" class="headerlink" title="使用 pug"></a>使用 pug</h3><p>要注意的一点是: 标签后面如果有属性(括号内的) 他和括号之间不要加空格,加了空格就会被当成字符串解析,详细可查看<a href="https://pugjs.org/zh-cn" target="_blank" rel="noopener">官方文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue-cli 3 配置:</span><span class="token comment" spellcheck="true">// 由于 cli 升级到3了,相关配置发生了很大的改变,所以要和2的更改不同</span>cnpm i <span class="token operator">-</span>D pug pug<span class="token operator">-</span>html<span class="token operator">-</span>loader pug<span class="token operator">-</span>plain<span class="token operator">-</span>loader<span class="token comment" spellcheck="true">// 和2比多了一个 pug-plain-loader</span><span class="token comment" spellcheck="true">// 以下配置可以不要</span><span class="token comment" spellcheck="true">/**// 在 vue.config.js (如果没有就在根目录下新建一个) 添加代码:module.exports = {    chainWebpack: config => {        config.module.rule('pug')            .test(/\.pug$/)            .use('pug-html-loader')            .loader('pug-html-loader')            .end()    }}*/</span><span class="token comment" spellcheck="true">// vue-cli 2+ 配置:</span><span class="token comment" spellcheck="true">// 下载包:</span>npm i <span class="token operator">-</span>D pug pug<span class="token operator">-</span>html<span class="token operator">-</span>loader<span class="token comment" spellcheck="true">// 在build/webpack.base.conf.js 的 module 中添加规则:</span> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span><span class="token regex">/\.pug$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">"pug-html-loader"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 省略其他规则</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Animate.css 一款强大的预设css3动画库</span>cnpm i <span class="token operator">-</span>S animate<span class="token punctuation">.</span>css <span class="token operator">=</span><span class="token operator">></span> cnpm install animate<span class="token punctuation">.</span>css <span class="token operator">--</span>save 写入dependenciesyarn add animate<span class="token punctuation">.</span>css<span class="token comment" spellcheck="true">// mint-ui</span><span class="token comment" spellcheck="true">// 依赖pug</span>yarn add <span class="token operator">-</span>D pug pug<span class="token operator">-</span>parsercnpm i <span class="token operator">-</span>S mint<span class="token operator">-</span>uiyarn add mint<span class="token operator">-</span>ui<span class="token comment" spellcheck="true">// moment</span>cnpm i <span class="token operator">-</span>S momentyarn add moment<span class="token comment" spellcheck="true">// vue-amap</span><span class="token comment" spellcheck="true">// warning vue-amap@0.5.9: The engine "core-js" appears to be invalid</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>amapyarn add vue<span class="token operator">-</span>amapyarn add core<span class="token operator">-</span>js<span class="token comment" spellcheck="true">// vue-baidu-map</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>baidu<span class="token operator">-</span>mapyarn add vue<span class="token operator">-</span>baidu<span class="token operator">-</span>map<span class="token comment" spellcheck="true">// vue-mobile-calendar</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>mobile<span class="token operator">-</span>calendaryarn add vue<span class="token operator">-</span>mobile<span class="token operator">-</span>calendar<span class="token comment" spellcheck="true">// axios</span>cnpm i <span class="token operator">-</span>D axios <span class="token operator">=</span><span class="token operator">></span> cnpm install axios <span class="token operator">--</span>save<span class="token operator">-</span>dev 写入devDependenciesyarn add <span class="token operator">-</span>D axios<span class="token comment" spellcheck="true">// vue-echarts</span>yarn add <span class="token operator">-</span>D vue<span class="token operator">-</span>echartsyarn add echarts<span class="token comment" spellcheck="true">// lodash</span>cnpm i <span class="token operator">-</span>S lodashyarn add lodash<span class="token comment" spellcheck="true">// less-loader@4.1.0" has unmet peer dependency "webpack@^2.0.0 || ^3.0.0 || ^4.0.0".</span>yarn add <span class="token operator">-</span>D webpack<span class="token comment" spellcheck="true">// css-loader</span>yarn add <span class="token operator">-</span>D css<span class="token operator">-</span>loader</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Java面试-Offer直通车 01.导学 06.JVM</title>
      <link href="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/"/>
      <url>/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指Java面试-Offer直通车"><a href="#剑指Java面试-Offer直通车" class="headerlink" title="剑指Java面试-Offer直通车"></a>剑指Java面试-Offer直通车</h1><p>@xiangzepro</p><h2 id="1-剑指Java面试-导学"><a href="#1-剑指Java面试-导学" class="headerlink" title="1. 剑指Java面试-导学"></a>1. 剑指Java面试-导学</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 现状：</span>缩减招聘人数（bat一线互联网大厂缩减招聘人数）毕业生增长企业内部 <span class="token punctuation">(</span>末位淘汰、优胜劣汰 的用人机制<span class="token punctuation">)</span>就业门槛更高 企业对人才要求也更高<span class="token comment" spellcheck="true">// 规划</span>小白<span class="token operator">/</span>初级工程师 <span class="token operator">=</span><span class="token operator">></span> 独挡一面甚至多面的高工专辑<span class="token number">1</span><span class="token punctuation">.</span>项目驱动学习，积累项目经验，独立完成前后端全栈的项目开发专辑<span class="token number">2</span><span class="token punctuation">.</span>分析归纳面试热点，功克Java面试，完善备战面试体系未来专辑 未来专辑<span class="token number">1</span><span class="token operator">:</span>归纳项目面试的微课，解决项目面试无从会的痛点未来专辑 未来专辑<span class="token number">2</span><span class="token operator">:</span>深入分析主流框架Spring的源码，并着手编写框架</code></pre><h3 id="课程导学"><a href="#课程导学" class="headerlink" title="课程导学"></a>课程导学</h3><p>由五个部分组成</p><ul><li>内容概述</li><li>学习门槛和适用人群</li><li>如何最大化利用好本门课程</li><li>JDK版本的选择</li><li>站前动员</li></ul><h3 id="1-1-课程概述"><a href="#1-1-课程概述" class="headerlink" title="1.1 课程概述"></a>1.1 课程概述</h3><ul><li>凝结了一线资深开发工程师的心血。</li><li>包含JVM底层知识、Java垃圾回收、多线程、常用类库、常考算法和数据结构、框架、缓存、网络、Linux操作系统、调优等高频考点，以及一些面试技巧和软技能点拨。</li></ul><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c1e38940001adc512800720.jpg" alt="课程概述"></p><h4 id="Java基础考点："><a href="#Java基础考点：" class="headerlink" title="Java基础考点："></a>Java基础考点：</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5cb194510001b37912800720.jpg" alt="Java基础考点"></p><h4 id="如何应对如此多的考点："><a href="#如何应对如此多的考点：" class="headerlink" title="如何应对如此多的考点："></a>如何应对如此多的考点：</h4><ul><li>面试官知识储备有限</li><li>考点频率不同、可以因地制宜地缩小备战范围</li><li>剥离出不变的通用知识点，以不变应万变</li><li>平时注意多积累</li></ul><h3 id="1-2-学习门槛和适用人群"><a href="#1-2-学习门槛和适用人群" class="headerlink" title="1.2 学习门槛和适用人群"></a>1.2 学习门槛和适用人群</h3><h4 id="门槛较低，适用范围较广"><a href="#门槛较低，适用范围较广" class="headerlink" title="门槛较低，适用范围较广"></a>门槛较低，适用范围较广</h4><ul><li>具备Java语言编程基础，最好了解些数据库、网络知识</li><li>适合有工作经验或者项目实战经验的想北站备战面试的同学</li><li>也适合对自己有高标准、高要求的同学</li></ul><h3 id="1-3-如何最大化利用好本门课程"><a href="#1-3-如何最大化利用好本门课程" class="headerlink" title="1.3 如何最大化利用好本门课程"></a>1.3 如何最大化利用好本门课程</h3><ul><li>合理利用检索引擎(Google、Baidu)，培养主动解决问题的能力，常识加深和扩展自己的知识面，锻炼独立填坑的能力。</li><li>尽量问与本门课程内容相关的问题，并提供足够的信息方便定位。</li></ul><h3 id="1-4-JDK版本的选择"><a href="#1-4-JDK版本的选择" class="headerlink" title="1.4 JDK版本的选择"></a>1.4 JDK版本的选择</h3><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c1cf5ad0001c88e12800720.jpg" alt="JDK版本的选择"></p><p>查看每个版本的维护时间</p><p>JDK8 和 JDK11 是长期支持的版本，分别支持到2025、2026年。（JDK9、JDK10只是过渡版本，只提供半年技术支持）</p><h3 id="1-5-站前"><a href="#1-5-站前" class="headerlink" title="1.5 站前"></a>1.5 站前</h3><ul><li>面试并非只争朝夕，需要注重积累。</li></ul><h2 id="6-剑指Java面试-Java底层知识：JVM"><a href="#6-剑指Java面试-Java底层知识：JVM" class="headerlink" title="6. 剑指Java面试-Java底层知识：JVM"></a>6. 剑指Java面试-Java底层知识：JVM</h2><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/6-1.java基础考点.jpg" alt="java基础考点"></p><pre class=" language-java"><code class="language-java">JavaEE基础  打包 WAR\EAR  基础 MVC Servlets JSPs  APIs JPA JAX<span class="token operator">-</span>WS内部<span class="token operator">/</span>内嵌类访问权限修饰词APIsOOPs线程集合JVM异常</code></pre><h3 id="6-1-谈谈你对Java的理解"><a href="#6-1-谈谈你对Java的理解" class="headerlink" title="6.1 谈谈你对Java的理解"></a>6.1 谈谈你对Java的理解</h3><h4 id="Java的语言特点"><a href="#Java的语言特点" class="headerlink" title="Java的语言特点"></a>Java的语言特点</h4><ol><li>平台无关性   跨平台，一次编译，到处运行</li><li>GC机制     垃圾回收机制：不用手动释放内存</li><li>语言特性   泛型、反射、lamda表达式</li><li>面向对象   封装、继承、多态</li><li>类库   集合、并发库、网络库、IO、NIO等</li><li>异常处理</li></ol><h3 id="6-2-平台无关性的实现"><a href="#6-2-平台无关性的实现" class="headerlink" title="6.2 平台无关性的实现"></a>6.2 平台无关性的实现</h3><h4 id="Compile-Once-Run-Anywhere如何实现"><a href="#Compile-Once-Run-Anywhere如何实现" class="headerlink" title="Compile Once, Run Anywhere如何实现"></a>Compile Once, Run Anywhere如何实现</h4><p>答：图片中</p><h4 id="1-编译运行"><a href="#1-编译运行" class="headerlink" title="1. 编译运行"></a>1. 编译运行</h4><p>javac指令，用来编译java的源码，即将源码编译生成字节码，存入到对应的.class文件当中，其会对程序的语法、句法以及一些语义进行检查。.class文件保存的就是java文件翻译成的二进制字节码，即java类文件中的属性、方法以及类中的常量信息都会被分别存储在class文件中。还会添加一个公有的静态常量属性.class，这个属性记录了类的相关信息及类型信息，是class的一个实例。</p><h4 id="2-javap指令"><a href="#2-javap指令" class="headerlink" title="2. javap指令"></a>2. javap指令</h4><p>是java自带的反汇编器，可以查看java编译器生成的字节码。通过比较字 节码和源代码，我们可以发现很多问题。“javap -c”对代码进行反汇编。</p><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c91a8210001319219201080.jpg" alt="Compile Once, Run Anywhere如何实现"></p><pre class=" language-java"><code class="language-java">javac com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ByteCodeSample<span class="token punctuation">.</span>javajavac <span class="token operator">-</span>encoding utf<span class="token operator">-</span><span class="token number">8</span> com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ByteCodeSample<span class="token punctuation">.</span>javajava com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSamplejavap <span class="token operator">-</span>helpjavap <span class="token operator">-</span>c com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample<span class="token comment" spellcheck="true">// 参考：通过javap命令分析java汇编指令：https://www.jianshu.com/p/6a8997560b05</span>Compiled from <span class="token string">"ByteCodeSample.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// java默认的无参构造函数 => 当我们不指定类的构造函数 编译器会为我们创建一个不带参数的构造函数</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span><span class="token function">ByteCodeSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0    <span class="token comment" spellcheck="true">//对diss?进行操作//从本地变量表中加载索引为0的变量的值，也即this的引用，压入栈</span>       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V //出栈，调用java/lang/Object."&lt;init>":()V 初始化对象，就是this指定的对象的init()方法完成初始化</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> iconst_1 <span class="token comment" spellcheck="true">// 对栈操作 把常亮1放入栈顶</span>       <span class="token number">1</span><span class="token operator">:</span> istore_1 <span class="token comment" spellcheck="true">// 将栈顶的值放入局部变量1中（就是第一个变量i中）</span>       <span class="token number">2</span><span class="token operator">:</span> iconst_5 <span class="token comment" spellcheck="true">// 把常亮5放入栈顶</span>       <span class="token number">3</span><span class="token operator">:</span> istore_2 <span class="token comment" spellcheck="true">// 将栈顶的值5放入局部变量2中（也就是变量j中）</span>       <span class="token number">4</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> （将变量<span class="token function">1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>）       <span class="token number">7</span><span class="token operator">:</span> iinc          <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> （将变量<span class="token function">2</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>）      <span class="token number">10</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream; //获取PrintStream的静态域 需要打印所以需要获取</span>      <span class="token number">13</span><span class="token operator">:</span> iload_1  <span class="token comment" spellcheck="true">// 将PrintStream对象 将其压入栈顶，将本地变量i的值推送到栈顶</span>      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(I)V // 调用PrintStream的println方法，去打印第一个变量的值（i）</span>      <span class="token number">17</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream;</span>      <span class="token number">20</span><span class="token operator">:</span> iload_2      <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(I)V</span>      <span class="token number">24</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在linux中操作</span><span class="token comment" spellcheck="true">// 上传</span>scp ByteCodeSample<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">root</span><span class="token annotation punctuation">@192</span><span class="token punctuation">.</span><span class="token number">168</span><span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token operator">~</span><span class="token comment" spellcheck="true">// 创建文件夹 复制 运行</span>mkdir <span class="token operator">-</span>p com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>cp ByteCodeSample<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">com</span><span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ls com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>java com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample</code></pre><p>ByteCodeSample.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCodeSample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    j<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="回答："><a href="#回答：" class="headerlink" title="回答："></a>回答：</h4><p>java文件首先经过javac编译生成字节码。将字节码保存在.class文件中。.class文件是跨平台的基础。<br>由不同平台的JVM进行解析，java语言在不同的平台上运行时不需要进行重新编译，java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p><h4 id="3-为什么JVM不直接将源码解析成机器码去执行"><a href="#3-为什么JVM不直接将源码解析成机器码去执行" class="headerlink" title="3. 为什么JVM不直接将源码解析成机器码去执行"></a>3. 为什么JVM不直接将源码解析成机器码去执行</h4><ul><li><p>准备工作：每次执行都要进行语法，句法的检查。</p><p>使用javac编译成字节码之后,多次执行也2、不需要再校验和补全了。</p></li><li><p>兼容性：也可以将别的语言解析成字节码。(可以由别的语言（例如ruby、scala）生成字节码。同样可以被jvm调用执行，也可以增加平台的兼容扩展能力，符合软件设计的中庸之道)</p></li></ul><h3 id="6-3-JVM如何加载-class文件"><a href="#6-3-JVM如何加载-class文件" class="headerlink" title="6.3 JVM如何加载.class文件"></a>6.3 JVM如何加载.class文件</h3><h4 id="1-Java虚拟机"><a href="#1-Java虚拟机" class="headerlink" title="1. Java虚拟机"></a>1. Java虚拟机</h4><ul><li>是抽象化的计算机，通过在实际的计算机上个仿真模拟计算机功能来实现的，JVM有自己完善的硬件架构：处理器，堆栈，寄存器等，还具有相应的指令系统，JVM 屏蔽了与具体操作系统平台相关的信息，使得java程序只需要生成在Java虚拟机上运行的字节码，就可以在不同平台上不加修改的运行。（一般我们不需要知道虚拟机的运行原理，只要专注于写java代码就可以了，这也正是虚拟机之所以存在的原因，就是屏蔽底层操作系统平台的不同，并减少基于原生语言开发的复杂性，只需要虚拟机厂商在特定操作系统上定义如何将字节码解析成本操作系统可执行的二进制码，java这项语言就能实现跨越各种平台） 对于jvm最值得我们学习两点：JVM内存结构模型，GC。（既是面试的重点，更是程序调优的关键）</li><li>JVM是内存中的虚拟机，JVM的存储就是内存，所有写的 类，常量，变量，方法都在内存中这决定着程序的健壮和高效。</li><li>JVM由Class Loader、Runtime Data Area、Execution Engine、Native Interface组成。</li></ul><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c6aa33a0001836e19201080.jpg" alt="JVM如何加载.class文件"></p><p>简要回答：</p><p>JVM主要由Class Loader、Runtime Data Area、Execution Engine、Native Interface这四个部分组成，它主要通过Class Loader将符合特定格式要求的class文件加载到内存里，并通过Execution Engine去解析class文件中的字节码，并提交给操作系统去执行。</p><p>Native Interface:（既本地接口） 融合不同开发语言的原生库为Java所用。（不管我们如何吹嘘java，它得执行性能，在绝大多数情况下并没有c或者c++高，主流的jvm也是基于c++去实现的，因此在涉及到一些需要较高执行性能的运算操作的时候，是需要java直接调用它们的。此外在本着不重复造轮子的原则，在实际生产中，某个库如果已经用到别的语言进行开发了，我们就不需要再开发一套，而是希望java能够对这些库进行调用。为了满足上述需求，jvm在内存中专门开辟了一块区域处理标记为native的代码，他的具体做法是native methed中登记native方法，在Execution执行时，加载native Library）</p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wt.javabasic.bytecode.ByteCodeSample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =></span><span class="token annotation punctuation">@CallerSensitive</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">forName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span>                <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">forName0</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// =></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">forName0</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> initialize<span class="token punctuation">,</span>                                            ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">;</span></code></pre><p>Runtime Data Area: JVM内存空间结构模型。（我们缩写的程序 都会被加载到这里，之后再开始运行，该结构模型的设计，堪称神做）</p><h3 id="6-4-什么是反射"><a href="#6-4-什么是反射" class="headerlink" title="6.4 什么是反射"></a>6.4 什么是反射</h3><h4 id="1-问：有没有了解过java的反射"><a href="#1-问：有没有了解过java的反射" class="headerlink" title="1. 问：有没有了解过java的反射"></a>1. 问：有没有了解过java的反射</h4><p>回答：java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它得任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h4 id="2-写一个反射的例子"><a href="#2-写一个反射的例子" class="headerlink" title="2. 写一个反射的例子"></a>2. 写一个反射的例子</h4><h5 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Robot</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>String helloSentence<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloSentence <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">throwHello</span><span class="token punctuation">(</span>String tag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> tag<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="ReflectSample"><a href="#ReflectSample" class="headerlink" title="ReflectSample"></a>ReflectSample</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectSample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class <span class="token class-name">rc</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wt.javabasic.reflect.Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Robot r <span class="token operator">=</span> <span class="token punctuation">(</span>Robot<span class="token punctuation">)</span> rc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class name is "</span> <span class="token operator">+</span> rc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// r.sayHi("zhangsan");</span>      <span class="token comment" spellcheck="true">// getDeclaredMethod可以获取 public protected private或者包类型的方法和属性，不能获取继承的方法(和实现接口的方法)</span>      Method getHello <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"throwHello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      getHello<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Object str <span class="token operator">=</span> getHello<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHello result is "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// getMethod可以获取public方法 包括继承的方法和实现接口的方法</span>      Method sayHi <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Field nameField <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>getDeclaredMethod 可以获取该类自有的所有的方法，但不能获取继承自父类的或者实现自接口的方法。</li><li>getMethod 只能获取该类的public方法，但是它能获取继承自父类的或者实现自接口的方法。</li><li>getHello 方法是私有的，所以在调用前要将其Accessible设置为true。</li></ul><h3 id="6-5-ClassLoader"><a href="#6-5-ClassLoader" class="headerlink" title="6.5 ClassLoader"></a>6.5 ClassLoader</h3><h4 id="1-类从编译到执行的过程"><a href="#1-类从编译到执行的过程" class="headerlink" title="1. 类从编译到执行的过程"></a>1. 类从编译到执行的过程</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c2735920001e3bc19201080.jpg" alt="类从编译到执行的过程"></p><h4 id="2-谈谈ClassLoader"><a href="#2-谈谈ClassLoader" class="headerlink" title="2. 谈谈ClassLoader"></a>2. 谈谈ClassLoader</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c41e499000131fc19201080.jpg" alt="谈谈ClassLoader"></p><h4 id="3-种类"><a href="#3-种类" class="headerlink" title="3. 种类"></a>3. 种类</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c556699000168fa19201080.jpg" alt="种类"></p><ul><li>BootStrapClassLoader: C++编写，加载核心库 java.* (通常核心类class被签名，不能被替换掉，他是有jvm内核实现的，在主流java虚拟机是由c++实现的)</li><li>ExtClassLoader: Java编写，加载扩展库 javax.* （用户可以自己定义类在这个目录下，通过这个ExtClassLoader去加载）</li><li>AppClassLoader: Java编写，加载程序所在目录 （加载classpath下的内容）</li><li>自定义ClassLoader: Java编写，定制化加载</li></ul><h4 id="4-自定义ClassLoader的实现"><a href="#4-自定义ClassLoader的实现" class="headerlink" title="4. 自定义ClassLoader的实现"></a>4. 自定义ClassLoader的实现</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c41e8da0001658719201080.jpg" alt="自定义ClassLoader的实现"></p><h3 id="6-6-ClassLoader的双亲委派机制"><a href="#6-6-ClassLoader的双亲委派机制" class="headerlink" title="6.6 ClassLoader的双亲委派机制"></a>6.6 ClassLoader的双亲委派机制</h3><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5cac56b7000199fa19201080.jpg" alt="ClassLoader的双亲委派机制"></p><h4 id="1-查看openJDK源码"><a href="#1-查看openJDK源码" class="headerlink" title="1. 查看openJDK源码"></a>1. 查看openJDK源码</h4><p>为什么查看openjdk，因为JDK部分代码闭源，对外公布的代码要看openJDK的代码。Linux上经常用到openJDK，</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/</a></p><p>=&gt; browse =&gt; src =&gt; share(不依赖平台的代码) =&gt; /native/java/lang/ClassLoader.c</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/cecd70d27b27/src/share/native/java/lang/ClassLoader.c" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/cecd70d27b27/src/share/native/java/lang/ClassLoader.c</a></p><pre class=" language-c++"><code class="language-c++">/* * Returns NULL if class not found. */JNIEXPORT jclass JNICALLJava_java_lang_ClassLoader_findBootstrapClass(JNIEnv *env, jobject loader,                                              jstring classname)...    cls = JVM_FindClassFromBootLoader(env, clname); // 通过jvm调用BootLoader done:    if (clname != buf) {        free(clname);    }    return cls;}</code></pre><h4 id="2-为什么要使用双亲委派机制去加载类"><a href="#2-为什么要使用双亲委派机制去加载类" class="headerlink" title="2. 为什么要使用双亲委派机制去加载类"></a>2. 为什么要使用双亲委派机制去加载类</h4><ul><li>避免多分同样字节码的加载 (内存宝贵)</li></ul><h3 id="6-7-loadClass和forName的区别"><a href="#6-7-loadClass和forName的区别" class="headerlink" title="6.7 loadClass和forName的区别"></a>6.7 loadClass和forName的区别</h3><h4 id="1-类的加载方式："><a href="#1-类的加载方式：" class="headerlink" title="1. 类的加载方式："></a>1. 类的加载方式：</h4><ol><li>隐式加载：new</li><li>显示加载：loadClass以及forName等方法</li></ol><h4 id="2-类的装载过程："><a href="#2-类的装载过程：" class="headerlink" title="2.类的装载过程："></a>2.类的装载过程：</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c285e070001c98b19201080.jpg" alt="loadClass和forName的区别"></p><p>区别：</p><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c28601300018d1919201080.jpg" alt="loadClass和forName的区别"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 后端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/2019/04/24/first-post/"/>
      <url>/2019/04/24/first-post/</url>
      
        <content type="html"><![CDATA[<p> 内容</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
