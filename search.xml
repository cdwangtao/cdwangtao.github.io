<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第04章 Arcgis JS Api基础</title>
      <link href="/2019/05/08/qian-duan/04-arcgis-api/"/>
      <url>/2019/05/08/qian-duan/04-arcgis-api/</url>
      
        <content type="html"><![CDATA[<h2 id="第04章-Arcgis-JS-Api基础"><a href="#第04章-Arcgis-JS-Api基础" class="headerlink" title="第04章 Arcgis JS Api基础"></a>第04章 Arcgis JS Api基础</h2><h3 id="第1讲-无"><a href="#第1讲-无" class="headerlink" title="第1讲 无"></a>第1讲 无</h3><h3 id="第2讲-重要API类"><a href="#第2讲-重要API类" class="headerlink" title="第2讲 重要API类"></a>第2讲 重要API类</h3><h4 id="主讲内容"><a href="#主讲内容" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Vs智能提示配置</li><li>地图类Map</li><li>图层类型</li><li>Geometry</li><li>Symbol </li><li>Graphic</li><li>Render</li><li>FeatureSet</li></ul><h4 id="1-VS智能提示配置"><a href="#1-VS智能提示配置" class="headerlink" title="1. VS智能提示配置"></a>1. VS智能提示配置</h4><ul><li>arcgis_js_v39_sdk\arcgis_js_api\sdk\jshelp\jsapi_vsdoc12_v38.js</li></ul><h4 id="2-地图类Map"><a href="#2-地图类Map" class="headerlink" title="2. 地图类Map"></a>2. 地图类Map</h4><ul><li>Map 是承载图层的容器，主要用于呈现地图服务、影像服务，此外还可以展示 WMS 服务等，一个图层只有被添加到 Map 中，才能被显示出来</li><li>例如：var myMap = new esri.Map(“Div”);</li></ul><h4 id="3-图层类型"><a href="#3-图层类型" class="headerlink" title="3. 图层类型"></a>3. 图层类型</h4><ul><li>图层是承载服务的载体（GraphicsLayer 除外），ArcGIS for Server 将 GIS 资源作为服务发布出来，要想在浏览器端看到这些服务，就必须将这些服务和图层关联起来，不同的服务对应不同的图层类型,下表列出了这些服务和 ArcGIS API for JavaScript 中图层的对应关系。 </li></ul><h5 id="3-1-图层和服务的对应关系"><a href="#3-1-图层和服务的对应关系" class="headerlink" title="3.1. 图层和服务的对应关系"></a>3.1. 图层和服务的对应关系</h5><table><thead><tr><th>图层</th><th>服务</th></tr></thead><tbody><tr><td>ArcGISDynamicMapServiceLayer</td><td>ArcGIS for Server 发布的 2D 动态地图服务</td></tr><tr><td>ArcGISImageServiceLayer</td><td>ArcGIS for Server 发布的影像地图服务</td></tr><tr><td>GraphicsLayer</td><td>客户端图层不对应 ArcGIS for Server 发布的服务</td></tr><tr><td>FeatureLayer</td><td>ArcGIS for Server 发布的要素服务或者地图服务中的图层</td></tr><tr><td>WMSLayer</td><td>调用 OGC（Open Geospatial Consortium）矢量地图服务</td></tr><tr><td>WMTSLayer</td><td>OGC（Open Geospatial Consortium）地图切片服务</td></tr><tr><td>KMLLayer</td><td>Keyhole Markup Language 描述和保存地理信息文件</td></tr><tr><td>VETiledLayer</td><td>微软的 Bing 地图服务</td></tr><tr><td>GeoRssLayer</td><td>支持 GeoRss 服务</td></tr></tbody></table><h5 id="3-2-地图和图层的关系"><a href="#3-2-地图和图层的关系" class="headerlink" title="3.2 地图和图层的关系"></a>3.2 地图和图层的关系</h5><p>地图是有多个图层组成的，因此关系包含与被包含的关系：<br>例如：</p><p>  var myMap = new esri.Map(“arcgisDiv”);<br>  var myTiledMapServiceLayer = new esri.layers.ArcGISTiledMapServiceLayer(“<a href="http://cache1.arcgisonline.cn/arcgis/rest/services/ChinaOnlineCommunity/MapServer&quot;)" target="_blank" rel="noopener">http://cache1.arcgisonline.cn/arcgis/rest/services/ChinaOnlineCommunity/MapServer&quot;)</a>; </p><p>  myMap.addLayer(myTiledMapServiceLayer);</p><h4 id="4-Geometry"><a href="#4-Geometry" class="headerlink" title="4.  Geometry"></a>4.  Geometry</h4><ul><li>几何对象用于表示对象的显示型式，在ArcGIS API for JavaScript 中 Geometry大体上可以分为下面几类：点、多点、线、矩形、多边和ScreenPoint。其中 ScreenPoint对象是最新版本增加的，是以像素的方式表示的点，而点、多点、线、矩形、多边形都是继承Geometry</li></ul><h5 id="4-1-Geometry-对象结构"><a href="#4-1-Geometry-对象结构" class="headerlink" title="4.1 Geometry 对象结构"></a>4.1 Geometry 对象结构</h5><p><img src="/2019/05/08/qian-duan/04-arcgis-api/ 4.1-Geometry 对象结构.png" alt="Geometry 对象结构"></p><h5 id="4-2-Geometry-类型名"><a href="#4-2-Geometry-类型名" class="headerlink" title="4.2 Geometry 类型名"></a>4.2 Geometry 类型名</h5><ul><li>Geometry 抽象类，定义几何体的图形。 </li><li>MapPoint 点对象</li><li>MultiPoint 多点对象。 </li><li>Polyline 多义线对象，由路径（Path）组合而成。 </li><li>Envelope 矩形对象，长宽方向分别平行于 X、Y 轴。 </li><li>Polygon 多边形对象，由环（Ring）组合而成。 </li><li>ScreenPoint 用像素来表示点的 X,Y 坐标，相对于屏幕的左上角。 </li></ul><h4 id="5-Symbol"><a href="#5-Symbol" class="headerlink" title="5. Symbol"></a>5. Symbol</h4><ul><li>Symbol 定义了如何在GraphicLayer上显示点，线，面和文本，符号定义了几何对象的所有非地理特征方面的外观，包括图形的颜色，边框线宽度，透明度等等。ArcGIS API for JavaScript 包含了很多符号类，每个类都允许你使用唯一的方式制定一种符号。每种符号都特定于一种类型（点、线，面和文本）。</li></ul><h5 id="5-1-几何类型和对应的符号"><a href="#5-1-几何类型和对应的符号" class="headerlink" title="5.1 几何类型和对应的符号"></a>5.1 几何类型和对应的符号</h5><ul><li>点 SimpleMarkerSymbol, PictureMarkerSymbol </li><li>线 SimpleLineSymbol, CartographicLineSymbol </li><li>面 SimpleFillSymbol, PictureFillSymbol </li><li>文本 TextSymbol, Font </li></ul><h5 id="5-2-符号集成关系结构图"><a href="#5-2-符号集成关系结构图" class="headerlink" title="5.2 符号集成关系结构图"></a>5.2 符号集成关系结构图</h5><p><img src="/2019/05/08/qian-duan/04-arcgis-api/5.2-符号集成关系结构图.png" alt="符号集成关系结构图"></p><h4 id="6-Graphic"><a href="#6-Graphic" class="headerlink" title="6. Graphic"></a>6. Graphic</h4><ul><li>Geometry 定义了对象的形状，Symbol 定义了图形是如何显示的，Graphic 可以包含一些属性信息，并且在 Javascript 中还可以使用 infoTemplate（一个 InfoTemplate 包含标题和内容模板字符串，该内容模板字符串用于将 Graphic 的属性转换成 HTML 的表达式）定义如何对属性信息进行显示，最终的 Graphic 则是被添加到 GraphicsLayer 中，GraphicsLayer 允许对 Graphics 进行事件监听，对于 Graphic 的描述可以用一个数学表达式来表示： </li><li>Graphic= Geometry+Attribute+Symbol+infoTemplate</li></ul><h4 id="7-Render（专题渲染）"><a href="#7-Render（专题渲染）" class="headerlink" title="7.  Render（专题渲染）"></a>7.  Render（专题渲染）</h4><ul><li>渲染器定义了一种或多种符号以应用于一个GraphicsLayer。每个 Graphic的符号所使用的符号取决于该 Graphic的属性值。渲染器指定了属性值与符号之间的对应关系。</li></ul><h4 id="8-FeatureSet"><a href="#8-FeatureSet" class="headerlink" title="8. FeatureSet"></a>8. FeatureSet</h4><ul><li>FeauteSet 是要素类的轻量级表示，相当于地理数据库中的一个要素类，是Feature（要素）的集合，FeatureSet中的每个Feature可能包含Geometry、属性、符号、和一个InfoTemplate。如果 FeatureSet不包含Geometry,只包含属性，那么FeatureSet可以看作一个表,其中每个 Feature是一个行对象。FeatureSet是我们在利用ArcGIS API for Javacript和ArcGIS for Server 进行数据通讯的一个非常重要的对象，当使用查询，地理处理和路径分析的时候，FeatureSet常常作为这些分析的功能的输入和输出参数。</li></ul><h3 id="第3讲-地图操作"><a href="#第3讲-地图操作" class="headerlink" title="第3讲 地图操作"></a>第3讲 地图操作</h3><h4 id="主讲内容-1"><a href="#主讲内容-1" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Map参数详解</li><li>Map主要方法</li><li>Map主要属性</li><li>Map的主要事件</li><li>实例讲解</li></ul><h4 id="1-Map参数详解"><a href="#1-Map参数详解" class="headerlink" title="1. Map参数详解"></a>1. Map参数详解</h4><ul><li>esri.Map(divId, options) </li><li>构造方法在创建一个 map 对象必须传入一个 div 元素作为其容器，此外这个构造方法还包括一系列可选的参数用来描述地图的相关行为，下面为常用的可选参数：</li></ul><h5 id="1-1-Map可选参数"><a href="#1-1-Map可选参数" class="headerlink" title="1.1 Map可选参数"></a>1.1 Map可选参数</h5><ul><li>Extent 如果设置了该选项，一旦这个选项的投影被设置，那么所有的图层都在定义的投影中绘制</li><li>Logo 是否显示 esri 的 logo </li><li>wrapAround180 是否连续移动地图，即通过日期变更线，好似对地图进行横向旋转 360 度.</li><li>lods 设置地图的初始比例级别 </li><li>maxScale 设置地图的最大可视比例尺 </li><li>sliderStyle 设置 slider 的样式，值为 large 或者 small</li></ul><h4 id="2-Map主要方法"><a href="#2-Map主要方法" class="headerlink" title="2. Map主要方法"></a>2. Map主要方法</h4><ul><li>toScreen/toMap 地图不屏幕之间的坐标转换。 </li><li>setScale 设置地图到指定的比例尺 </li><li>setZoom 放缩到指定的层级 </li><li>setLevel 放缩到指定的层级 </li><li>setExtend 设置地图显示范围，常用于进行地图的平移操作 </li><li>disablePan 禁止使用鼠标平移地图 </li><li>removeAllLayers 移除所有图层</li></ul><ul><li>removeAllLayers 移除所有图层 </li><li>addLayer 添加图层 </li><li>getBasemap 获取底图 </li><li>getLayer 根据 id 获取图层 </li><li>getLayersVisibleAtScaleRange 获取某一比例尺下的可见图层（图层数组） </li><li>getScale 获取当前的比例尺 </li><li>hidePanArrows 隐藏移动时候的鼠标箭头 </li></ul><ul><li>hideZoomSlider 隐藏放大滑块 </li><li>panRight 向右平移 </li><li>panUp 向北平移 </li><li>removeAllLayers 移除所有图层 </li><li>removeLayer 移除指定图层 </li><li>reorderLayer 改变图层的顺序 </li><li>reposition 复位地图，该方法在地图的 DIV 被复位的时候要用到 </li><li>setTimeExtent 设置地图的时间范围 </li></ul><ul><li>setTimeSlider 设置和地图关联的时间滑块 </li><li>setZoom 设置放大级别 </li><li>showPanArrows 显示平移箭头 </li><li>showZoomSlider 显示放大滑块</li></ul><h4 id="3-Map主要属性"><a href="#3-Map主要属性" class="headerlink" title="3. Map主要属性"></a>3. Map主要属性</h4><ul><li>autoResize 如果浏览器窗口或 ContentPane 填充的地图控件的小部件的大小调整了，地图是否自动调整大小。 </li><li>attribution 地图属性 </li><li>fadeOnZoom 在地图进行缩放时，是否启用淡入淡出的效果 </li></ul><ul><li>extent 地图外包矩形的范围，即四个角点坐标范围 </li><li>force3DTransforms 是否启用 CSS3 转换 </li><li>infoWindow 在地图上显示消息框 </li><li>isClickRecenter 按住 Shift 键，在地图上单击鼠标左键，是否将该点设为地图中心</li></ul><ul><li>isDoubleClickZoom 双击鼠标左键，是否进行放大地图操作 </li><li>isPan 设置地图是否可以用鼠标移动 </li><li>spatialReference 获取地图的空间参考信息 </li><li>isKeyboardNavigation 是否用键盘上的“+”和“-”导航地图  </li><li>isRubberBandZoom 是否启用橡皮筋缩放模式 </li><li>isScrollWheelZoom 是否允许滚轮进行缩放操作 </li></ul><ul><li>isShiftDoubleClickZoom 按住 Shift 键，在地图上双击鼠标左键，是否将该点设为地图中心的同时进行缩放操作 </li><li>geographicExtent 地图的地理坐标范围(只支持 Web 墨卡托) </li><li>layerIds 地图已加载的图层 ID 列表 </li><li>loaded 地图控件是否已加载完成 </li><li>graphics 获取地图的 GraphicsLayer </li><li>position 地图左上角坐标 </li></ul><ul><li>root 容纳图层、消息框等的容器的 DOM 节点 </li><li>showAttribution 是否允许显示地图属性 </li><li>snappingManager 捕捉管理器 </li><li>isZoomSlider 设置或者获取地图的放大滑块状态（true 和 false） </li><li>layerIds 获取地图的图层的 ID(数组) </li><li>navigationMode 设置或者获取地图的导航模式 </li><li>timeExtent 地图的时间范围 </li></ul><h4 id="4-Map主要事件"><a href="#4-Map主要事件" class="headerlink" title="4. Map主要事件"></a>4. Map主要事件</h4><ul><li>onExtentChange 地图范围改变事件。 </li><li>onBasemapChange 地图的底图发生变化 </li><li>onLoad 当第一个图层或者底图被添加到 Map 中的时候发生 </li><li>onClick 在地图上发生单击的时候发生 </li><li>onLayerAdd 当图层添加的时候发生 </li><li>onLayersAddResult 当所有图层都添加结束后发生，使用 map.addLayers 方法之后</li></ul><ul><li>onLayersRemoved 当所有图层都移除后发生 </li><li>onLoad 当第一个图层或者底图加载成功后发生 </li><li>onMouseDown 当鼠标在地图上单击的时候发生 </li><li>onMouseMove 当鼠标在地图上移动的时候发生（在这个事件中经常用来获取 X,Y坐标）. </li><li>onMouseOut 当鼠标移出地图的时候发生 </li></ul><h3 id="第4讲-地图常用工具"><a href="#第4讲-地图常用工具" class="headerlink" title="第4讲 地图常用工具"></a>第4讲 地图常用工具</h3><h4 id="主讲内容-2"><a href="#主讲内容-2" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>放大</li><li>缩小</li><li>左移</li><li>右移</li><li>上移</li><li>下移</li><li>全屏</li><li>拖动</li><li>鹰眼</li></ul><h4 id="放大"><a href="#放大" class="headerlink" title="放大"></a>放大</h4><p>dojo.require(“esri.toolbars.navigation”);</p><p>navToolbar.activate(esri.toolbars.Navigation.ZOOM_IN)</p><h4 id="缩小"><a href="#缩小" class="headerlink" title="缩小"></a>缩小</h4><p>navToolbar.activate(esri.toolbars.Navigation.ZOOM_OUT);</p><h4 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h4><p>myMap.panLeft</p><h4 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h4><p>myMap.panRight();</p><h4 id="上移"><a href="#上移" class="headerlink" title="上移"></a>上移</h4><p>myMap.panUp</p><h4 id="下移"><a href="#下移" class="headerlink" title="下移"></a>下移</h4><p>myMap.panDown</p><h4 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h4><p>navToolbar.zoomToFullExtent()</p><h4 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h4><p>navToolbar.activate(esri.toolbars.Navigation.PAN)</p><h4 id="鹰眼"><a href="#鹰眼" class="headerlink" title="鹰眼"></a>鹰眼</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">OverviewMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> over <span class="token operator">=</span> <span class="token punctuation">{</span>    map<span class="token punctuation">:</span> Map<span class="token punctuation">,</span>    attachTo<span class="token punctuation">:</span> <span class="token string">"bottom-right"</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token string">"#D84E13"</span><span class="token punctuation">,</span>    expandFactor<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    baseLayer<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">esri<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>ArcGISTiledMapServiceLayer</span><span class="token punctuation">(</span>MapServer<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> MapViewer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">esri<span class="token punctuation">.</span>dijit<span class="token punctuation">.</span>OverviewMap</span><span class="token punctuation">(</span>over<span class="token punctuation">,</span> dojo<span class="token punctuation">.</span><span class="token function">byId</span><span class="token punctuation">(</span><span class="token string">"OverViewDiv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   MapViewer<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第5讲-图层控制"><a href="#第5讲-图层控制" class="headerlink" title="第5讲 图层控制"></a>第5讲 图层控制</h3><h3 id="第6讲-常用控件（1）"><a href="#第6讲-常用控件（1）" class="headerlink" title="第6讲 常用控件（1）"></a>第6讲 常用控件（1）</h3><h4 id="主讲内容-3"><a href="#主讲内容-3" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Scalebar（比例尺）</li><li>Bookmark（书签）</li><li>InfoWindow（信息窗口）</li></ul><h4 id="1-Scalebar（标尺工具）"><a href="#1-Scalebar（标尺工具）" class="headerlink" title="1. Scalebar（标尺工具）"></a>1. Scalebar（标尺工具）</h4><ul><li>Scalebar 用于在地图上或者一个指定的 HTML 节点中显示地图的比例尺信息。</li></ul><h4 id="2-Bookmark书签"><a href="#2-Bookmark书签" class="headerlink" title="2. Bookmark书签"></a>2. Bookmark书签</h4><ul><li>书签控件用于管理用户创建的地图书签提供新建书签、定位到书签和删除书签的功能。</li></ul><h4 id="3-InfoWindow"><a href="#3-InfoWindow" class="headerlink" title="3. InfoWindow"></a>3. InfoWindow</h4><ul><li>InfoWindow 控件是一个带有小尾巴的窗口，小尾巴指向一个位置或感兴趣的要素，其本质上就是一个 HTML 弹出框，InfoWindow 经常包括 Graphic 的属性信息。如果 Graphic 定义了InfoTemplate，则点击 Graphic 显示 InfoTemplate 所定义的，每个地图仅有一个 InfoWindow，无构造函数。</li><li>构造方法：无，通过 Map.infoWindow 获取或设置</li></ul><h3 id="第7讲-常用控件（2）"><a href="#第7讲-常用控件（2）" class="headerlink" title="第7讲 常用控件（2）"></a>第7讲 常用控件（2）</h3><h4 id="主讲内容-4"><a href="#主讲内容-4" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Navigation导航</li><li>Draw绘图</li><li>Legend图例</li></ul><h4 id="1-Navigation导航"><a href="#1-Navigation导航" class="headerlink" title="1. Navigation导航"></a>1. Navigation导航</h4><ul><li>构造方法： esri.toolbars.Navigation（map） </li><li>创建导航对象，传入一个 map 对象作为参数，无可选参数</li></ul><h4 id="2-Draw绘图"><a href="#2-Draw绘图" class="headerlink" title="2. Draw绘图"></a>2. Draw绘图</h4><ul><li>在地图上进行绘图操作，主要是借助于 Toolbar 上的 Draw（绘图）工具，绘图工具支持几何对象的创建</li><li>new Draw(map, options?)</li></ul><h4 id="3-Legend图例"><a href="#3-Legend图例" class="headerlink" title="3. Legend图例"></a>3. Legend图例</h4><ul><li>Legend 控件用于动态显示全部或者部分图层的标签和符号信息。</li><li>new Legend(params, srcNodeRef) </li></ul><h3 id="第8讲-数据查询IdentifyTask（1）"><a href="#第8讲-数据查询IdentifyTask（1）" class="headerlink" title="第8讲 数据查询IdentifyTask（1）"></a>第8讲 数据查询IdentifyTask（1）</h3><h4 id="主讲内容-5"><a href="#主讲内容-5" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>IdentifyTask</li></ul><h4 id="1-IdentifyTask"><a href="#1-IdentifyTask" class="headerlink" title="1. IdentifyTask"></a>1. IdentifyTask</h4><ul><li>IdentifyTask是在某个地图服务中进行空间查询，IdentifyTask以IdentifyParameters对象作为参数，能查询同一个地图服务的一个或者多个图层，IdentifyTask仅仅用于空间信息查询。</li></ul><h5 id="1-1-IdentifyTask构造函数"><a href="#1-1-IdentifyTask构造函数" class="headerlink" title="1.1 IdentifyTask构造函数"></a>1.1 IdentifyTask构造函数</h5><ul><li>构造函数：  new IdentifyTask(url, options?)</li><li><a href="服务地址">Url:</a>&lt;服务地址&gt;</li><li><p>options?:可选参数</p><p> gdbVersion：指定要显示geodatabase版本</p><p> Geodatabase是一种采用标准关系数据库技术来表现地理信息的数据模型</p></li></ul><h5 id="1-2-IdentifyTask-方法"><a href="#1-2-IdentifyTask-方法" class="headerlink" title="1.2 IdentifyTask 方法"></a>1.2 IdentifyTask 方法</h5><ul><li>execute(identifyParameters, callback?, errback?)</li><li>发送一个请求到ArcGIS其他地图服务资源识别特性基于theIdentifyParameters identifyParameters中指定的参数。</li></ul><h5 id="1-3-Execute-参数说明"><a href="#1-3-Execute-参数说明" class="headerlink" title="1.3 Execute 参数说明"></a>1.3 Execute 参数说明</h5><ul><li><p>identifyParameters</p><p>  指定的标准用来识别特性。空间信息化标准</p></li><li><p>Callback 函数调用方法时完成，回调函数</p></li><li><p>Errback：错误返回函数</p></li></ul><h5 id="1-4-IdentifyTask属性"><a href="#1-4-IdentifyTask属性" class="headerlink" title="1.4 IdentifyTask属性"></a>1.4 IdentifyTask属性</h5><ul><li><p>url</p><p> URL的ArcGIS Server REST资源代表了地图服务。</p></li></ul><h5 id="1-5-IdentifyTask事件"><a href="#1-5-IdentifyTask事件" class="headerlink" title="1.5 IdentifyTask事件"></a>1.5 IdentifyTask事件</h5><ul><li>Complete：完成时间，当完成后执行</li><li>Error：发生错误的时候执行</li></ul><h5 id="1-6-IdentifyParameters"><a href="#1-6-IdentifyParameters" class="headerlink" title="1.6 IdentifyParameters"></a>1.6 IdentifyParameters</h5><ul><li>IdentifyTask的参数对象，指定一些参数，来设置查询的标准特性</li></ul><h5 id="1-7-IdentifyParameters常量"><a href="#1-7-IdentifyParameters常量" class="headerlink" title="1.7 IdentifyParameters常量"></a>1.7 IdentifyParameters常量</h5><ul><li>LAYER_OPTION_ALL：识别所有的图层，包含隐藏图层</li><li>LAYER_OPTION_TOP：只有最顶层可见层标识。</li><li>LAYER_OPTION_VISIBLE：所有显示图层</li></ul><h5 id="1-8-IdentifyParameters属性"><a href="#1-8-IdentifyParameters属性" class="headerlink" title="1.8 IdentifyParameters属性"></a>1.8 IdentifyParameters属性</h5><ul><li>DynamicLayerInfos：动态图层信息数组用来改变层排序或重新定义映射</li><li>Geometry：在确定用于选择的几何特性。</li><li>Height：当前正在查看地图的像素高度。</li><li>LayerDefinitions：一系列层定义表达式,允许你过滤个别层的特性。 </li><li>LayerIds：层执行确认操作。</li><li>LayerOption：指定哪写层可以使用。</li><li>LayerTimeOptions：对象数组,允许您定义时间选项指定的层</li></ul><ul><li>MapExtent:程度或当前正在查看地图的边界框。</li><li>MaxAllowableOffset:返回的最大允许抵消用于泛化几何图形识别操作。</li><li>ReturnGeometry:是否返回几何对象</li><li>SpatialReference：输入和输出的空间引用几何图形以及mapExtent。</li><li>TimeExtent：指定时间范围内使用的识别任务。</li><li>Tolerance：从指定的几何距离屏幕像素内的执行标识。</li><li>Width：当前正在查看地图的宽度(以像素为单位)。</li></ul><h3 id="第9讲-数据查询QueryTask（2）"><a href="#第9讲-数据查询QueryTask（2）" class="headerlink" title="第9讲 数据查询QueryTask（2）"></a>第9讲 数据查询QueryTask（2）</h3><h4 id="主讲内容-6"><a href="#主讲内容-6" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>QueryTask</li><li>IdentifyTask与QueryTask区别</li><li>Query</li></ul><h4 id="1-QueryTask"><a href="#1-QueryTask" class="headerlink" title="1. QueryTask"></a>1. QueryTask</h4><ul><li>QueryTask 是一个进行空间和属性查询的功能类,可以在某个地图服务的某个子图层内进行查询</li><li>QueryTask 执行需要两个先决条件：一个是需要查询的图层 URL、一个是进行查询的过滤条件. QueryTask 以 Query 为执行参数，空间查询和属性查询的设置都是在 Query 对象上进行,QueryTask 的过滤条件除了属性过滤，同时还支持空间过滤.</li><li>构造函数:new QueryTask(url, options?)</li></ul><h5 id="1-1-QueryTask属性"><a href="#1-1-QueryTask属性" class="headerlink" title="1.1 QueryTask属性"></a>1.1 QueryTask属性</h5><ul><li>url:要查询服务的路径</li></ul><h5 id="1-2-QueryTask-主要方法"><a href="#1-2-QueryTask-主要方法" class="headerlink" title="1.2 QueryTask 主要方法"></a>1.2 QueryTask 主要方法</h5><ul><li>execute(parameters, callback?, errback?)执行查询一个服务层</li><li>executeForCount(query, callback?, errback?)：查询统计，返回数量</li></ul><h4 id="2-IdentifyTask与QueryTask区别"><a href="#2-IdentifyTask与QueryTask区别" class="headerlink" title="2. IdentifyTask与QueryTask区别"></a>2. IdentifyTask与QueryTask区别</h4><ul><li>IdentifyTask一般用于点查询</li><li>QueryTask用于各种查询</li></ul><h4 id="3-Query"><a href="#3-Query" class="headerlink" title="3. Query"></a>3. Query</h4><ul><li>Query是QueryTask查询参数对象</li></ul><h5 id="3-1-Query主要属性"><a href="#3-1-Query主要属性" class="headerlink" title="3.1 Query主要属性"></a>3.1 Query主要属性</h5><ul><li>Distance：输入的缓冲区范围</li><li>Geometry：用于查询几何范围</li><li>objectIds：想要查询的图层编号</li><li>orderByFields:排序字段</li><li>outFields:返回字段</li><li>returnGeometry：是否返回几何对象</li><li>Where：查询条件</li><li>Text：where使用Like</li><li>multipatchOption:参数支持查询功能服务的数据源featureclass</li></ul><h3 id="第10讲-测量工具"><a href="#第10讲-测量工具" class="headerlink" title="第10讲 测量工具"></a>第10讲 测量工具</h3><h4 id="主讲内容-7"><a href="#主讲内容-7" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Measurement</li></ul><h4 id="1-Measurement"><a href="#1-Measurement" class="headerlink" title="1. Measurement"></a>1. Measurement</h4><ul><li>测量小部件：提供了工具计算当前位置(位置)和测量距离(测量距离)和地区(测量区)</li><li>构造函数：new Measurement(params, srcNodeRef)</li></ul><h5 id="1-1-Params参数"><a href="#1-1-Params参数" class="headerlink" title="1.1 Params参数"></a>1.1 Params参数</h5><ul><li>defaultAreaUnit：默认面积单位</li><li>defaultLengthUnit：默认长度单位</li><li>lineSymbol：线的样式</li><li>Map：默认地图</li><li>pointSymbol：点样式</li></ul><h5 id="1-2-方法"><a href="#1-2-方法" class="headerlink" title="1.2 方法"></a>1.2 方法</h5><ul><li>clearResult() 删除图形和测量结果。</li><li>destroy() 破坏测量部件。</li><li>getTool() 返回一个对象有两个属性:工具和单位的名字。（3.11）</li><li>getUnit() 返回当前活跃的工具的计量单位。（3.11）</li><li>hide() 隐藏部件</li></ul><ul><li>hideTool(toolName) 隐藏指定工具</li><li>measure(geometry) 调用的测量功能部件创建的几何。（3.11）</li><li>setTool(toolName, activate) 激活或取消激活工具。</li><li>show() 显示部件</li><li>showTool(toolName) 显示工具</li></ul><ul><li>startup() 完成测量部件的创建。</li></ul><h5 id="1-3-事件（3-11）"><a href="#1-3-事件（3-11）" class="headerlink" title="1.3 事件（3.11）"></a>1.3 事件（3.11）</h5><ul><li><p>Measure </p><p>描述：没有单击时候的事件</p></li><li><p>measure-end</p><p>描述：测量完成后执行事件</p></li><li><p>measure-start</p><p> 描述：测量开始的时候</p></li><li><p>tool-change</p><p>描述：工具改变的时候</p></li><li><p>unit-change</p><p>描述：单位发生变化的时候</p></li></ul><h3 id="第11讲-数据查询FindTask（3）"><a href="#第11讲-数据查询FindTask（3）" class="headerlink" title="第11讲 数据查询FindTask（3）"></a>第11讲 数据查询FindTask（3）</h3><h4 id="主讲内容-8"><a href="#主讲内容-8" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>FindTask</li><li>FindParameters</li></ul><h4 id="1-FindTask"><a href="#1-FindTask" class="headerlink" title="1. FindTask"></a>1. FindTask</h4><ul><li><p>FindTask 是在某个地图服务中进行属性查询的功能类，FindTask 以 FindParameters 对象作为参数，能查询同一个地图服务的一个或者多个图层，并且可以在多个字段中进行查询，FindTask 仅仅用于属性信息的查询，在 FindTask 执行结束后，可以从其返回结果中获取查询的对象，所在图层和字段。</p></li><li><p>构造函数:</p><p>   new esri.tasks.FindTask(url,options?) </p></li></ul><h5 id="1-1-FindTask属性"><a href="#1-1-FindTask属性" class="headerlink" title="1.1 FindTask属性"></a>1.1 FindTask属性</h5><ul><li>url 服务地址</li></ul><h5 id="1-2-FindTask方法"><a href="#1-2-FindTask方法" class="headerlink" title="1.2 FindTask方法"></a>1.2 FindTask方法</h5><ul><li>execute(findParameters,callback?,errback?)</li></ul><h4 id="2-FindParameters"><a href="#2-FindParameters" class="headerlink" title="2. FindParameters"></a>2. FindParameters</h4><ul><li><p>FindTask的查询参数</p></li><li><p>构造函数：</p><p>   new esri.tasks.FindParameters()</p></li></ul><h5 id="2-1-findParameters属性"><a href="#2-1-findParameters属性" class="headerlink" title="2.1 findParameters属性"></a>2.1 findParameters属性</h5><ul><li>Contains：搜索匹配的文本信息</li><li>dynamicLayerInfos：改变图层排序的数组</li><li>layerDefinitions：层定义表达式，过滤层的属性，如：年龄&gt;20</li><li>layerIds层编号数组</li><li>maxAllowableOffset：对查找操作返回的几何图形进行，最大泛化操作。</li></ul><ul><li>outSpatialReference输出几何图形的空间参考。</li><li>returnGeometry是否返回几何图形</li><li>searchFields你要搜索返回显示的字段</li><li>searchText：你要搜索的文本，针对于searchFields</li></ul><h3 id="第12讲-时间滑块控件"><a href="#第12讲-时间滑块控件" class="headerlink" title="第12讲 时间滑块控件"></a>第12讲 时间滑块控件</h3><h4 id="主讲内容-9"><a href="#主讲内容-9" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>timeSlider</li><li>timeExtent</li></ul><h4 id="1-TimeSlider"><a href="#1-TimeSlider" class="headerlink" title="1. TimeSlider"></a>1. TimeSlider</h4><ul><li><p>位置：esri/dijit/TimeSlider</p></li><li><p>作用：用于在 Web 端对时态感知图层提供支持</p></li><li><p>构造函数:</p><p>   new esri.dijit.TimeSlider(params,srcNodeRef)</p></li></ul><h5 id="1-1-TimeSlider属性"><a href="#1-1-TimeSlider属性" class="headerlink" title="1.1 TimeSlider属性"></a>1.1 TimeSlider属性</h5><ul><li>Loop 是否循环执行</li><li>Playing 是否正在打开</li><li>thumbCount指针计数</li><li>thumbMovingRate 指针移动比例</li><li>timeStops一个数组表示停止的日期</li></ul><h5 id="1-2-TimeSlider方法"><a href="#1-2-TimeSlider方法" class="headerlink" title="1.2 TimeSlider方法"></a>1.2 TimeSlider方法</h5><ul><li>createTimeStopsByCount(timeExtent,count?)输入时间范围，根据指定时间数量执行</li><li>timeExtent：时间范围</li><li>Count：输入数量</li></ul><ul><li><p>createTimeStopsByTimeInterval(timeExtent,timeInterval?,timeIntervalUnits?)</p><p>  创建一个为每个指定的间隔时间停止,即。(周、月、日)</p></li><li><p>timeExtent：时间范围</p></li><li><p>timeInterval：时间间隔的长度</p></li><li><p>timeIntervalUnits：时间间隔单位</p></li></ul><ul><li>getCurrentTimeExtent()  获取当前时间范围时间滑块</li><li>next() 移到下一个时间</li><li>pause() 暂停时间滑块</li><li>play() 开始播放</li><li>previous() 移动到前一个时间步</li><li>setLabels(labels) 指定一个字符串数组作为标签。.3</li></ul><ul><li>setLoop(loop) 决定是否循环。</li><li>setThumbCount(thumbCount) 设置指针数量</li><li>setThumbIndexes(indexes) 两个整数数组,第一个值决定,指针开始点</li><li>setThumbMovingRate(thumbMovingRate) 设置变化速率，速度</li></ul><ul><li>setTickCount(count) 指定数量显示在时间滑块</li><li>setTimeStops(timeStops) 设置停止时间</li></ul><h5 id="1-3-TimeSlider事件"><a href="#1-3-TimeSlider事件" class="headerlink" title="1.3 TimeSlider事件"></a>1.3 TimeSlider事件</h5><ul><li>time-extent-change事件发生变化的时候</li></ul><h4 id="2-TimeExtent"><a href="#2-TimeExtent" class="headerlink" title="2. TimeExtent"></a>2. TimeExtent</h4><ul><li>时间范围</li><li>new esri.TimeExtent(startTime,endTime)</li><li>事件范围构造函数</li></ul><h3 id="第13讲-数据查询ImageServiceTask（4）"><a href="#第13讲-数据查询ImageServiceTask（4）" class="headerlink" title="第13讲 数据查询ImageServiceTask（4）"></a>第13讲 数据查询ImageServiceTask（4）</h3><h4 id="主讲内容-10"><a href="#主讲内容-10" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>ImageServiceIdentifyTask</li><li>ImageServiceIdentifyParameters</li><li>ImageServiceIdentifyResult</li></ul><h4 id="1-ImageServiceIdentifyTask"><a href="#1-ImageServiceIdentifyTask" class="headerlink" title="1. ImageServiceIdentifyTask"></a>1. ImageServiceIdentifyTask</h4><ul><li><p>ImageServiceIdentifyTask 与 IdentifyTask 类似，但只能用于识别影像服务数据。</p></li><li><p>构造函数</p><p>new ImageServiceIdentifyTask(url)</p></li><li><p>方法</p><p>execute(params,callback?,errback?)</p></li></ul><h4 id="2-ImageServiceIdentifyParameters"><a href="#2-ImageServiceIdentifyParameters" class="headerlink" title="2. ImageServiceIdentifyParameters"></a>2. ImageServiceIdentifyParameters</h4><ul><li><p>ImageServiceIdentifyTask的查询参数</p></li><li><p>构造函数</p><p>new esri.layers.ImageServiceParameters()</p></li></ul><h5 id="2-1-ImageServiceIdentifyParameters属性"><a href="#2-1-ImageServiceIdentifyParameters属性" class="headerlink" title="2.1 ImageServiceIdentifyParameters属性"></a>2.1 ImageServiceIdentifyParameters属性</h5><ul><li>Extent 输出图片的范围</li><li>format 地图图像格式</li><li>height 寻求单层图像像素的高度</li><li>interpolation 当前的插值法</li><li>mosaicRule 指定了镶嵌规则，在图像上定义扫描线</li><li>renderingRule 呈现规则</li></ul><p>.</p><ul><li>timeExtent 映像的时间范围</li><li>width 请求的图像在像素宽度</li></ul><h4 id="3-ImageServiceIdentifyResult"><a href="#3-ImageServiceIdentifyResult" class="headerlink" title="3. ImageServiceIdentifyResult"></a>3. ImageServiceIdentifyResult</h4><ul><li>ImageServiceIdentifyTask返回结果</li></ul><h5 id="3-1-ImageServiceIdentifyResult属性"><a href="#3-1-ImageServiceIdentifyResult属性" class="headerlink" title="3.1 ImageServiceIdentifyResult属性"></a>3.1 ImageServiceIdentifyResult属性</h5><ul><li>catalogItems 获取返回结果的目录项，是一个 FeatureSet 。</li><li>catalogItemVisibilities 获取目彔顷的可见性（镶嵌数据集才可以使用该属性）</li><li>location 获取点击的位置。 </li><li>name 获取名称。 </li><li>objectID 获取对象的 ID。 </li><li>properties 获取属性。 </li><li>value 获取值</li></ul><h3 id="第14讲-esri小部件BasemapToggle"><a href="#第14讲-esri小部件BasemapToggle" class="headerlink" title="第14讲 esri小部件BasemapToggle"></a>第14讲 esri小部件BasemapToggle</h3><h4 id="主讲内容-11"><a href="#主讲内容-11" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li><p>BasemapToggle</p></li><li><p>构造函数</p><p>new esri.dijit.BasemapToggle(params,srcNodeRef) 实现地图服务之间的切换</p></li></ul><h4 id="1-BasemapToggle"><a href="#1-BasemapToggle" class="headerlink" title="1. BasemapToggle"></a>1. BasemapToggle</h4><h5 id="1-1-属性"><a href="#1-1-属性" class="headerlink" title="1.1 属性"></a>1.1 属性</h5><ul><li>basemap二级基础图切换</li><li>basemaps对象包含标签和每个基础图图像的url</li><li>loaded小部件是否已经加载</li><li>map地图对象</li><li>theme小部件样式</li><li>visible默认情况下是否可见</li></ul><h5 id="1-2-方法-1"><a href="#1-2-方法-1" class="headerlink" title="1.2 方法"></a>1.2 方法</h5><ul><li>destroy()破坏小部件</li><li>hide()隐藏小部件</li><li><p>show()显示小部件</p></li><li><p>startup()完成创建部件</p></li><li>toggle()切换到下一个基础图</li></ul><h4 id="1-3-事件"><a href="#1-3-事件" class="headerlink" title="1.3 事件"></a>1.3 事件</h4><ul><li>Load小部件被加载的时候</li><li>Toggle当触发的时候时切换方法</li></ul><h3 id="第15讲-esri小部件BasemapGallery"><a href="#第15讲-esri小部件BasemapGallery" class="headerlink" title="第15讲 esri小部件BasemapGallery"></a>第15讲 esri小部件BasemapGallery</h3><h4 id="主讲内容-12"><a href="#主讲内容-12" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>BasemapGallery</li><li>Basemap</li></ul><h4 id="1-BasemapGallery"><a href="#1-BasemapGallery" class="headerlink" title="1. BasemapGallery"></a>1. BasemapGallery</h4><ul><li><p>BasemapGallery</p></li><li><p>构造函数</p><p>new esri.dijit.BasemapGallery(params,srcNodeRef?) 实现多层地图服务之间的切换</p></li></ul><h5 id="1-1-属性-1"><a href="#1-1-属性-1" class="headerlink" title="1.1 属性"></a>1.1 属性</h5><ul><li>Basemaps 地图服务集合</li><li>Loaded是否加载了服务</li><li>portalUrl可选参数传入一个门户URL,包括实例的名称,用于访问包含基础图画廊的团体项目。</li></ul><h5 id="1-2-方法-2"><a href="#1-2-方法-2" class="headerlink" title="1.2 方法"></a>1.2 方法</h5><ul><li>add(basemap)添加地图服务</li><li>destroy()破坏小部件</li><li>get(id)返回指定id的基础图</li><li>getSelected()当前选择的基础图</li><li>remove(id) 删除指定id的基础图</li><li>select(id)选择指定ID的基础图</li><li>startup()完成创建部件</li></ul><h5 id="1-3-事件-1"><a href="#1-3-事件-1" class="headerlink" title="1.3 事件"></a>1.3 事件</h5><ul><li>add 添加基础图层</li><li>Error错误事件</li><li>Load加载事件</li><li>Remove移除图层时候发生的事件</li><li>selection-change 选择服务，发生改变时候的事件</li></ul><h4 id="2-Basemap"><a href="#2-Basemap" class="headerlink" title="2. Basemap"></a>2. Basemap</h4><ul><li><p>基础地图类</p></li><li><p>主要用于地图BasemapGallery</p></li><li><p>构造：</p><p>new Basemap(params)</p></li></ul><h5 id="2-1-Basemap属性"><a href="#2-1-Basemap属性" class="headerlink" title="2.1 Basemap属性"></a>2.1 Basemap属性</h5><ul><li>Id 地图编号</li><li>thumbnailUrl基础图的缩略图的Url</li><li>Title 标题</li><li>Layers 图层集合</li></ul><h5 id="2-2-Basemap方法"><a href="#2-2-Basemap方法" class="headerlink" title="2.2 Basemap方法"></a>2.2 Basemap方法</h5><ul><li>ngetLayers()获取图层列表</li></ul><h5 id="2-3-Basemap"><a href="#2-3-Basemap" class="headerlink" title="2.3 Basemap"></a>2.3 Basemap</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> waterTemplateLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">esri<span class="token punctuation">.</span>dijit<span class="token punctuation">.</span>BasemapLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span>basemapURL<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> waterBasemap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">esri<span class="token punctuation">.</span>dijit<span class="token punctuation">.</span>Basemap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  layers<span class="token punctuation">:</span><span class="token punctuation">[</span>waterTemplateLayer<span class="token punctuation">]</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span><span class="token string">"Water Template"</span><span class="token punctuation">,</span>  thumbnailUrl<span class="token punctuation">:</span><span class="token string">"images/waterThumb.png"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第16讲-编辑Editor（1）"><a href="#第16讲-编辑Editor（1）" class="headerlink" title="第16讲 编辑Editor（1）"></a>第16讲 编辑Editor（1）</h3><h4 id="主讲内容-13"><a href="#主讲内容-13" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>TemplatePicker</li><li>Editor</li></ul><h4 id="1-TemplatePicker"><a href="#1-TemplatePicker" class="headerlink" title="1. TemplatePicker"></a>1. TemplatePicker</h4><ul><li><p>构造函数</p><p>new esri.dijit.editing.TemplatePicker(params,srcNodeRef) 采集元素样式模板，到模板中</p></li></ul><h5 id="1-1-TemplatePicker属性"><a href="#1-1-TemplatePicker属性" class="headerlink" title="1.1 TemplatePicker属性"></a>1.1 TemplatePicker属性</h5><ul><li>Grid 引用数据网格用于显示的模板</li><li>Tooltip 显示标签信息</li></ul><h5 id="1-2-TemplatePicker方法"><a href="#1-2-TemplatePicker方法" class="headerlink" title="1.2 TemplatePicker方法"></a>1.2 TemplatePicker方法</h5><ul><li>attr(name,value?)获取或设置模板的属性选择器</li><li>clearSelection()清楚当前的选择</li><li>destroy()破坏模板选择</li><li>getSelected()获得用户的选择项</li><li>startup()完成创建部件</li><li>update()更新小部件属性</li></ul><h5 id="1-3-TemplatePicker事件"><a href="#1-3-TemplatePicker事件" class="headerlink" title="1.3 TemplatePicker事件"></a>1.3 TemplatePicker事件</h5><ul><li>selection-change选择项目发生改变的时候</li></ul><h4 id="2-Editor"><a href="#2-Editor" class="headerlink" title="2. Editor"></a>2. Editor</h4><ul><li><p>地图图像编辑和移动功能</p></li><li><p>构造函数： </p><p>  new esri.toolbars.Edit(map,options?)</p></li></ul><h5 id="2-1-Editor属性"><a href="#2-1-Editor属性" class="headerlink" title="2.1 Editor属性"></a>2.1 Editor属性</h5><ul><li>allowAddVertices允许添加到顶点</li><li>allowDeletevertices用户是否可以删除顶点，有效的多段线,多边形和多点几何图形。</li><li>ghostLineSymbol 象征画线</li><li>ghostVertexSymbol象征画有效的多线和多边形的几何图形。</li></ul><ul><li>textSymbolEditorHolder象征一个用户定义的HTML元素的编辑器</li><li>uniformScaling,保留几何调整大小</li><li>vertexSymbol 象征顶点</li></ul><h5 id="2-2-Editor方法"><a href="#2-2-Editor方法" class="headerlink" title="2.2 Editor方法"></a>2.2 Editor方法</h5><ul><li>activate(tool,graphic,options?)激活工具栏编辑提供的图形。</li><li>deactivate()禁止使用</li><li>getCurrentState()描述一个对象的当前状态</li><li>refresh()工具栏刷新的内部状态</li></ul><h3 id="第17讲-编辑Editor（2）"><a href="#第17讲-编辑Editor（2）" class="headerlink" title="第17讲 编辑Editor（2）"></a>第17讲 编辑Editor（2）</h3><h4 id="主讲内容-14"><a href="#主讲内容-14" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Editor事件</li><li>Editor常量</li></ul><h4 id="1-Editor事件"><a href="#1-Editor事件" class="headerlink" title="1. Editor事件"></a>1. Editor事件</h4><ul><li><p>Activate 激活产生的事件</p></li><li><p>Deactivate 禁用产生的事件</p></li><li><p>graphic-click 点击一个图形产生的事件</p></li><li><p>graphic-first-move 用户第一次移动图形产生事件</p></li><li><p>graphic-move 不断的移动图形产生事件</p></li><li><p>graphic-move-start 开始移动图形产生事件</p></li></ul><ul><li><p>graphic-move-stop 移动图形停止的时候产生事件</p></li><li><p>Rotate 旋转的时候会产生事件</p></li><li><p>rotate-first-move 第一次旋转移动的时候产生事件</p></li><li><p>rotate-start 旋转开始的时候产生事件</p></li><li><p>rotate-stop 旋转结束的时候产生的事件</p></li></ul><ul><li><p>Scale 图形被扩展的时候产生的事件</p></li><li><p>scale-first-move 图形第一次被扩展移动的时候产生的事件</p></li><li><p>scale-start 扩展开始的时候的事件</p></li><li><p>scale-stop 扩展结束的时候的事件</p></li><li><p>vertex-add 添加顶点的时候</p></li><li><p>vertex-click 顶点被单击的时候产生的事件</p></li></ul><ul><li><p>vertex-delete 顶点被删除的时候的事件</p></li><li><p>vertex-first-move 顶点被第一次移动的时候产生的事件</p></li><li><p>vertex-mouse-out 顶点鼠标放下的时候产生的事件</p></li><li><p>vertex-mouse-over 顶点鼠标结束的时候产生的事件</p></li><li><p>vertex-move 顶点移动的时产生的事件</p></li></ul><ul><li><p>vertex-move-start 顶点移动开始的时候产生的事件</p></li><li><p>vertex-move-stop 顶点移动停止的时候产生的事件</p></li></ul><h4 id="2-Editor常量"><a href="#2-Editor常量" class="headerlink" title="2. Editor常量"></a>2. Editor常量</h4><ul><li><p>EDIT_TEXT textSymbol 在编辑模式下，编辑文本内容</p></li><li><p>EDIT_VERTICES 编辑线，增加、更新、删除</p></li><li><p>MOVE 移动多边形，线段</p></li><li><p>ROTATE 旋转 版本2.1</p></li><li><p>SCALE 调整一个图形 版本2.1</p></li></ul><h3 id="第18讲-编辑Editor（3）"><a href="#第18讲-编辑Editor（3）" class="headerlink" title="第18讲 编辑Editor（3）"></a>第18讲 编辑Editor（3）</h3><h4 id="主讲内容-15"><a href="#主讲内容-15" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li><p>esri/dijit/editing/Editor</p><p>编辑器小部件提供了开箱即用的编辑功能 使用一个可编辑的图层功能服务</p></li><li><p>构造函数：</p><p>new Editor(params, srcNodeRef)</p></li></ul><h4 id="1-Editor事件-1"><a href="#1-Editor事件-1" class="headerlink" title="1. Editor事件"></a>1. Editor事件</h4><p>Load 加载事件</p><h4 id="2-Editor常量-1"><a href="#2-Editor常量-1" class="headerlink" title="2. Editor常量"></a>2. Editor常量</h4><ul><li><p>CREATE_TOOL_ARROW 箭头工具</p></li><li><p>CREATE_TOOL_AUTOCOMPLETE 自动完成多边形工具</p></li><li><p>CREATE_TOOL_CIRCLE 圆形工具</p></li><li><p>CREATE_TOOL_ELLIPSE 椭圆工具</p></li><li><p>CREATE_TOOL_FREEHAND_POLYGON 徒手多边形工具</p></li><li><p>CREATE_TOOL_FREEHAND_POLYLINE 徒手画多段线</p></li><li><p>CREATE_TOOL_POLYGON 多边形工具</p></li><li><p>CREATE_TOOL_POLYLINE 多段线工具</p></li><li><p>CREATE_TOOL_RECTANGLE 矩形工具</p></li><li><p>CREATE_TOOL_TRIANGLE 三角形工具</p></li></ul><h3 id="第19讲-Geometry（1）"><a href="#第19讲-Geometry（1）" class="headerlink" title="第19讲 Geometry（1）"></a>第19讲 Geometry（1）</h3><h4 id="主讲内容-16"><a href="#主讲内容-16" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Geometry</li><li>Point</li><li>Polyline</li><li>Polygon</li></ul><h4 id="1-Geometry"><a href="#1-Geometry" class="headerlink" title="1. Geometry"></a>1. Geometry</h4><ul><li>几何对象的基类。这个类没有构造函数。</li></ul><h4 id="2-Point"><a href="#2-Point" class="headerlink" title="2. Point"></a>2. Point</h4><ul><li><p>它是一个地图坐标单位，一个位置定义的X和Y坐标</p></li><li><p>构造函数1：</p><p><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">new Point(x, y, </a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">spatialReference</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">)</a></p></li><li><p>构造函数2：<a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">new </a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">Point(</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">coords</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">, </a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">spatialReference</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">)</a></p><p>用一个数组,其中包含一个x,y坐标和空间参考价值。</p></li><li><p>构造函数3：<a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">new Point(</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">json</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">)</a>使用一个JSON对象</p></li><li><p>构造函数4：<a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">new Point(long, </a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">lat</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">)</a></p></li><li><p>构造函数5：<a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">new Point(point</a><a href="http://jshelp.thinkgis.cn/jsapi/point-amd.html" target="_blank" rel="noopener">)</a></p></li></ul><h5 id="2-1-Point属性"><a href="#2-1-Point属性" class="headerlink" title="2.1 Point属性"></a>2.1 Point属性</h5><ul><li>spatialReference 空间参考（空间参考描述了一个地物在地球上的真实位置）</li><li>Type几何图形的类型。</li><li>X 经度</li><li>Y  纬度</li></ul><h5 id="2-2-Point方法"><a href="#2-2-Point方法" class="headerlink" title="2.2 Point方法"></a>2.2 Point方法</h5><ul><li>getLatitude()返回的纬度坐标</li><li>getLongitude()返回的经度坐标</li><li>normalize()变化的x坐标在+ / - 180</li><li>offset(dx, dy)补偿点的x和y方向</li><li>setLatitude(lat)设置纬度坐标</li><li>setLongitude(lon)设置经度坐标</li><li>setSpatialReference(sr)设置空间参考</li></ul><ul><li>setX(x)集点的x坐标</li><li>setY(y)集点的y坐标</li><li>toJson()转换为JSON对象</li><li>update(x, y)更新x,y坐标</li></ul><h5 id="2-3-构造函数1实例"><a href="#2-3-构造函数1实例" class="headerlink" title="2.3 构造函数1实例"></a>2.3 构造函数1实例</h5><h5 id="2-4-构造函数2实例"><a href="#2-4-构造函数2实例" class="headerlink" title="2.4 构造函数2实例"></a>2.4 构造函数2实例</h5><h5 id="2-5-构造函数3实例"><a href="#2-5-构造函数3实例" class="headerlink" title="2.5 构造函数3实例"></a>2.5 构造函数3实例</h5><h5 id="2-6-构造函数4实例"><a href="#2-6-构造函数4实例" class="headerlink" title="2.6 构造函数4实例"></a>2.6 构造函数4实例</h5><h5 id="2-7-构造函数5实例"><a href="#2-7-构造函数5实例" class="headerlink" title="2.7 构造函数5实例"></a>2.7 构造函数5实例</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构造函数1实例</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">118.15</span><span class="token punctuation">,</span> <span class="token number">33.80</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SpatialReference</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   wkid<span class="token punctuation">:</span> <span class="token number">4326</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数2实例</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.65</span><span class="token punctuation">,</span><span class="token number">45.53</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SpatialReference</span><span class="token punctuation">(</span><span class="token punctuation">{</span> wkid<span class="token punctuation">:</span><span class="token number">4326</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数3实例</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">122.65</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span> <span class="token number">45.53</span><span class="token punctuation">,</span> <span class="token string">"spatialReference"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"wkid"</span><span class="token punctuation">:</span> <span class="token number">4326</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数4实例</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数5实例</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">{</span>latitude<span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span> longitude<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-Polyline"><a href="#3-Polyline" class="headerlink" title="3. Polyline"></a>3. Polyline</h4><ul><li><p>多线段</p></li><li><p>构造函数1：</p><p>new Polyline(spatialReference)</p></li><li><p>构造函数2：</p><p>new Polyline(json)</p></li><li><p>构造函数3：</p><p>new Polyline(coordinates)</p></li></ul><h5 id="3-1-Polyline属性"><a href="#3-1-Polyline属性" class="headerlink" title="3.1 Polyline属性"></a>3.1 Polyline属性</h5><ul><li>Paths一个数组的路径</li><li>spatialReference 空间参考</li><li>Type几何类型</li></ul><h5 id="3-2-Polyline方法"><a href="#3-2-Polyline方法" class="headerlink" title="3.2 Polyline方法"></a>3.2 Polyline方法</h5><ul><li><p>addPath(path) 添加一个路径折线。</p></li><li><p>getExtent() 获取折线范围</p></li><li><p>getPoint(pathIndex, pointIndex)</p><p>返回一个指定一个点</p></li><li><p>insertPoint(pathIndex, pointIndex, point)</p><p>在折线上插入一个点</p></li></ul><ul><li><p>removePath(pathIndex) 移除一条折线</p></li><li><p>removePoint(pathIndex, pointIndex)</p><p>删除给定多段线内的点</p></li><li><p>setPoint(pathIndex, pointIndex, point)</p><p>修改在一条线上的点</p></li><li><p>toJson()转换为JSON对象</p></li></ul><h5 id="3-2-构造函数1实例"><a href="#3-2-构造函数1实例" class="headerlink" title="3.2 构造函数1实例"></a>3.2 构造函数1实例</h5><p>构造函数2实例</p><p>构造函数3实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构造函数1实例</span><span class="token keyword">new</span> <span class="token class-name">Polyline</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpatialReference</span><span class="token punctuation">(</span><span class="token punctuation">{</span>wkid<span class="token punctuation">:</span><span class="token number">4326</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数2实例</span><span class="token keyword">var</span> polylineJson <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"paths"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.68</span><span class="token punctuation">,</span><span class="token number">45.53</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.58</span><span class="token punctuation">,</span><span class="token number">45.55</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.57</span><span class="token punctuation">,</span><span class="token number">45.58</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.53</span><span class="token punctuation">,</span><span class="token number">45.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"spatialReference"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"wkid"</span><span class="token punctuation">:</span><span class="token number">4326</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> polyline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polyline</span><span class="token punctuation">(</span>polylineJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数3实例</span><span class="token keyword">var</span> singlePathPolyline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polyline</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-Polygon"><a href="#4-Polygon" class="headerlink" title="4. Polygon"></a>4. Polygon</h4><ul><li>多边形</li><li>构造1：new Polygon(spatialReference)</li><li>构造2：new Polygon(json)  </li><li>构造3：new Polygon(coordinates)</li></ul><h5 id="4-1-Polygon属性"><a href="#4-1-Polygon属性" class="headerlink" title="4.1 Polygon属性"></a>4.1 Polygon属性</h5><ul><li>Rings一个数组的环。每个环是由三个或三个以上的点</li><li>spatialReference 空间参考</li><li>Type 几何类型</li></ul><h5 id="4-2-Polygon方法"><a href="#4-2-Polygon方法" class="headerlink" title="4.2 Polygon方法"></a>4.2 Polygon方法</h5><ul><li>addRing(ring)添加一个多边形环</li><li>contains(point) 如果指定的点在多边形内，检查客户端</li><li>fromExtent(extent)返回一个新的多边形环 </li><li>getCentroid()返回多边形的中心点</li><li>getExtent()返回多边形的范围</li></ul><ul><li>getPoint(ringIndex, pointIndex)返回一个指定的点</li><li>insertPoint(ringIndex, pointIndex, point)插入指定点</li><li>isClockwise(ring)检查是否一个多边形戒指是顺时针方向。</li><li>removePoint(ringIndex, pointIndex)移除指定的点</li></ul><ul><li>setPoint(ringIndex, pointIndex, point)修改指定的点</li><li>setSpatialReference(sr)设置空间参考</li><li>toJson()转换为JSON对象</li></ul><h5 id="4-3-构造函数1"><a href="#4-3-构造函数1" class="headerlink" title="4.3 构造函数1"></a>4.3 构造函数1</h5><p>构造函数2</p><p>构造函数3</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构造函数1</span><span class="token keyword">var</span> poly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polygon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpatialReference</span><span class="token punctuation">(</span><span class="token punctuation">{</span>wkid<span class="token punctuation">:</span><span class="token number">4326</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数2</span><span class="token keyword">var</span> poly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polygon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpatialReference</span><span class="token punctuation">(</span><span class="token punctuation">{</span>wkid<span class="token punctuation">:</span><span class="token number">4326</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> polygonJson  <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"rings"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.63</span><span class="token punctuation">,</span><span class="token number">45.52</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.57</span><span class="token punctuation">,</span><span class="token number">45.53</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.52</span><span class="token punctuation">,</span><span class="token number">45.50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.49</span><span class="token punctuation">,</span><span class="token number">45.48</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.64</span><span class="token punctuation">,</span><span class="token number">45.49</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.63</span><span class="token punctuation">,</span><span class="token number">45.52</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">122.63</span><span class="token punctuation">,</span><span class="token number">45.52</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"spatialReference"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"wkid"</span><span class="token punctuation">:</span><span class="token number">4326</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> polygon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polygon</span><span class="token punctuation">(</span>polygonJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造函数3</span><span class="token keyword">var</span> singleRingPolygon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polygon</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第20讲-Geometry实例（1）"><a href="#第20讲-Geometry实例（1）" class="headerlink" title="第20讲 Geometry实例（1）"></a>第20讲 Geometry实例（1）</h3><h4 id="主讲内容-17"><a href="#主讲内容-17" class="headerlink" title="主讲内容"></a>主讲内容</h4><h3 id="第21讲-Geometry（2）"><a href="#第21讲-Geometry（2）" class="headerlink" title="第21讲 Geometry（2）"></a>第21讲 Geometry（2）</h3><h4 id="主讲内容-18"><a href="#主讲内容-18" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Circle</li><li>Extent</li><li>ScreenPoint</li></ul><h4 id="1-Circle"><a href="#1-Circle" class="headerlink" title="1. Circle"></a>1. Circle</h4><ul><li>圆型类</li><li>构造1：new Circle(center, options?)</li><li>构造2：new Circle(params)</li></ul><h5 id="1-1-Circle属性"><a href="#1-1-Circle属性" class="headerlink" title="1.1 Circle属性"></a>1.1 Circle属性</h5><ul><li>Center 圆的中心点。</li><li>Radius 半径</li><li>radiusUnit 半径单位</li><li>Rings 数组的坐标值构成圆环</li><li>spatialReference 空间参考</li><li>Type 几何类型</li></ul><h5 id="2-2-Circle方法"><a href="#2-2-Circle方法" class="headerlink" title="2.2 Circle方法"></a>2.2 Circle方法</h5><ul><li>addRing(ring) 添加一个多边形环</li><li>contains(point) 指定的点是否在范围内</li><li>fromExtent(extent) 根据范围返回一个几何图形</li><li>getCentroid() 返回定义多边形的中心点</li><li>getExtent() 返回范围</li><li>getPoint(ringIndex, pointIndex) 获取指定索引的点</li></ul><ul><li>insertPoint(ringIndex, pointIndex, point)插入点</li><li>isClockwise(ring)判断环是否为顺时针方向</li><li>removePoint(ringIndex, pointIndex)移除点</li><li>removeRing(ringIndex)移除环</li></ul><ul><li>setPoint(ringIndex, pointIndex, point)把一个点添加到圆中</li><li>toJson()转换为JSON</li></ul><h4 id="2-Extent"><a href="#2-Extent" class="headerlink" title="2. Extent"></a>2. Extent</h4><ul><li>范围</li><li>构造：new Extent(xmin, ymin, xmax, ymax, spatialReference)</li></ul><h5 id="2-1-Extent属性"><a href="#2-1-Extent属性" class="headerlink" title="2.1 Extent属性"></a>2.1 Extent属性</h5><ul><li><p>nspatialReference空间参考</p></li><li><p>Type几何类型</p></li><li>Xmax</li><li>Xmin</li><li>Ymax</li><li>Ymin</li></ul><h5 id="2-2-Extent方法"><a href="#2-2-Extent方法" class="headerlink" title="2.2 Extent方法"></a>2.2 Extent方法</h5><ul><li>centerAt(point)设置中心点</li><li>contains(geometry)判断几何对象是否在范围内</li><li>getCenter()获得中心点</li><li>getHeight()获得高度</li><li>getWidth()获得宽度</li></ul><ul><li>intersects(geometry)获取相交的范围</li><li>update(xmin, ymin, xmax, ymax, spatialReference)更新范围内容</li></ul><h4 id="3-ScreenPoint"><a href="#3-ScreenPoint" class="headerlink" title="3. ScreenPoint"></a>3. ScreenPoint</h4><ul><li>屏幕坐标对象</li><li>构造：new ScreenPoint(x, y)</li></ul><h5 id="3-1-ScreenPoint属性"><a href="#3-1-ScreenPoint属性" class="headerlink" title="3.1 ScreenPoint属性"></a>3.1 ScreenPoint属性</h5><ul><li>x</li><li>y</li></ul><h5 id="3-2-ScreenPoint方法"><a href="#3-2-ScreenPoint方法" class="headerlink" title="3.2 ScreenPoint方法"></a>3.2 ScreenPoint方法</h5><ul><li>setX(x)  </li><li>setY(y)</li><li>update(x, y)</li></ul><h3 id="第22讲-符号渲染（1）"><a href="#第22讲-符号渲染（1）" class="headerlink" title="第22讲 符号渲染（1）"></a>第22讲 符号渲染（1）</h3><h4 id="主讲内容-19"><a href="#主讲内容-19" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Renderer</li><li>ClassBreaksRenderer</li><li>DotDensityRenderer</li><li>ScaleDependentRenderer</li></ul><h4 id="1-Renderer"><a href="#1-Renderer" class="headerlink" title="1. Renderer"></a>1. Renderer</h4><p>渲染器的基类，没有构造函数</p><h5 id="1-1-Renderer属性"><a href="#1-1-Renderer属性" class="headerlink" title="1.1 Renderer属性"></a>1.1 Renderer属性</h5><ul><li>colorInfo 为图层元素定义颜色信息</li><li>opacityInfo 图层元素透明度</li><li>rotationInfo 定义旋转符合标志</li></ul><h5 id="1-2-Renderer方法"><a href="#1-2-Renderer方法" class="headerlink" title="1.2 Renderer方法"></a>1.2 Renderer方法</h5><ul><li>getColor(graphic)获取图形颜色</li><li>getOpacity(graphic)获取图像透明度</li><li>getRotationAngle(graphic)获取图形旋转角度</li><li>getSize(graphic)返回图形符号的大小(以像素为单位)</li><li>getSymbol(graphic)得到图形的样式</li></ul><ul><li>setColorInfo(info)设置颜色信息</li><li>setOpacityInfo(info)设置透明度信息</li><li>setRotationInfo(info)设置旋转信息</li><li>setSizeInfo()设置符号大小</li><li>toJson() 转换为JSON对象</li></ul><h4 id="2-ClassBreaksRenderer"><a href="#2-ClassBreaksRenderer" class="headerlink" title="2. ClassBreaksRenderer"></a>2. ClassBreaksRenderer</h4><ul><li><p>基于某些属性值的类渲染器</p></li><li><p>构造函数1:new ClassBreaksRenderer(defaultSymbol, attributeField)</p></li><li><p>构造函数2：</p><p>   new ClassBreaksRenderer(json)</p></li></ul><h5 id="2-1-ClassBreaksRenderer属性"><a href="#2-1-ClassBreaksRenderer属性" class="headerlink" title="2.1 ClassBreaksRenderer属性"></a>2.1 ClassBreaksRenderer属性</h5><ul><li>attributeField属性字段</li><li>backgroundFillSymbol背景填充样式</li><li>classificationMethod用于生成类，分类方法</li><li>colorInfo颜色信息</li><li>defaultSymbol 默认样式</li><li>Infos提供了信息类、渲染信息的数组</li></ul><ul><li>isMaxInclusive是否最大值</li><li>normalizationField 规范化字段名称</li><li>normalizationTotal总体规范</li><li>normalizationType规范类型</li><li>opacityInfo 透明信息</li><li>rotationInfo旋转信息</li><li>sizeInfo 大小信息</li></ul><h5 id="2-1-ClassBreaksRenderer方法"><a href="#2-1-ClassBreaksRenderer方法" class="headerlink" title="2.1 ClassBreaksRenderer方法"></a>2.1 ClassBreaksRenderer方法</h5><ul><li>addBreak(minValueOrInfo, maxValue?, symbol?) 添加一个渲染器</li><li>clearBreaks() 清楚所有渲染器</li><li>getBreakIndex(graphic) 获取图形索引</li><li>getBreakInfo(graphic)返回渲染信息 </li><li>getColor(graphic)返回图形颜色</li><li>getOpacity(graphic)返回图形透明度</li></ul><ul><li>getRotationAngle(graphic)返回图形旋转角度</li><li>getSize(graphic)返回图形大小，像素</li><li>getSymbol(graphic)返回样式</li><li>removeBreak(minValue, maxValue)删除渲染</li></ul><ul><li>setOpacityInfo(info)设置透明度信息</li><li>setRotationInfo(info)设置旋转信息</li><li>setSizeInfo()设置符号大小</li><li>toJson() 转换为JSON对象</li></ul><h4 id="3-DotDensityRenderer"><a href="#3-DotDensityRenderer" class="headerlink" title="3. DotDensityRenderer"></a>3. DotDensityRenderer</h4><ul><li><p>能够创建可视化的数据点密度</p></li><li><p>构造函数：</p><p>   new DotDensityRenderer(params)</p></li></ul><h5 id="3-1-DotDensityRenderer属性"><a href="#3-1-DotDensityRenderer属性" class="headerlink" title="3.1 DotDensityRenderer属性"></a>3.1 DotDensityRenderer属性</h5><ul><li>backgroundColor 背景颜色</li><li>colorInfo 颜色信息</li><li>dotShape 用于渲染点</li><li>dotSize 点的大小(以像素为单位)。</li><li>dotValue 一个点代表的价值</li><li>Fields 字段数组</li><li>opacityInfo 透明信息</li></ul><ul><li>Outline线轮廓特性</li><li>rotationInfo 旋转信息</li><li>sizeInfo 符号大小</li></ul><h5 id="3-2-DotDensityRenderer方法"><a href="#3-2-DotDensityRenderer方法" class="headerlink" title="3.2 DotDensityRenderer方法"></a>3.2 DotDensityRenderer方法</h5><ul><li>getColor(graphic)  获取颜色</li><li>getOpacity(graphic)获取透明度</li><li>getRotationAngle(graphic)获取旋转角度</li><li>getSize(graphic)获取符号大小</li><li>getSymbol(graphic)获取样式</li><li>setBackgroundColor(color)获取背景色  </li><li>setColorInfo(info)  获取颜色信息</li><li>setDotSize(size)获取点大小</li></ul><ul><li>setDotValue(value)设置点的值</li><li>setOpacityInfo(info)设置透明度</li><li>setOutline(outline)设置线轮廓</li><li>setRotationInfo(info)设置旋转信息</li><li>setSizeInfo()  设置符号信息</li><li>toJson()转换为JSON对象</li></ul><h4 id="4-ScaleDependentRenderer"><a href="#4-ScaleDependentRenderer" class="headerlink" title="4. ScaleDependentRenderer"></a>4. ScaleDependentRenderer</h4><ul><li>具有使用多个渲染器的能力</li><li>构造函数:</li><li>new ScaleDependentRenderer(options?)</li></ul><h5 id="4-1-ScaleDependentRenderer属性"><a href="#4-1-ScaleDependentRenderer属性" class="headerlink" title="4.1 ScaleDependentRenderer属性"></a>4.1 ScaleDependentRenderer属性</h5><ul><li>rendererInfos渲染器信息</li><li>其他属性跟renderer基类一样</li></ul><h5 id="4-2-ScaleDependentRenderer方法"><a href="#4-2-ScaleDependentRenderer方法" class="headerlink" title="4.2 ScaleDependentRenderer方法"></a>4.2 ScaleDependentRenderer方法</h5><ul><li>getRenderInfoByZoom(zoom) 返回缩放级别</li><li>getRendererInfo(graphic) 返回图形渲染信息</li><li>getRendererInfoByScale(scale) 返回指定的渲染器的信息</li><li>其他方法继承于Renderer基类</li></ul><h5 id="4-3-关于点的DOT的解释"><a href="#4-3-关于点的DOT的解释" class="headerlink" title="4.3 关于点的DOT的解释"></a>4.3 关于点的DOT的解释</h5><ul><li>通常一个点是不止一个。例如,如果字段的值被映射为150000,dotValue 1000功能将有150点随机放置边界内的功能。值围捕。499不会得到一个点的值。500将获得一个点的值。</li></ul><h3 id="第23讲-符号渲染（2）"><a href="#第23讲-符号渲染（2）" class="headerlink" title="第23讲 符号渲染（2）"></a>第23讲 符号渲染（2）</h3><h4 id="主讲内容-20"><a href="#主讲内容-20" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>HeatmapRenderer</li><li>SimpleRenderer</li><li>UniqueValueRenderer</li></ul><h4 id="1-HeatmapRenderer"><a href="#1-HeatmapRenderer" class="headerlink" title="1. HeatmapRenderer"></a>1. HeatmapRenderer</h4><ul><li><p>这个渲染器使用高斯模糊技术，在可视化强调更高密度的区域， 呈现点数据到一个光栅</p></li><li><p>构造函数：</p><p>   new HeatmapRenderer(options)</p></li></ul><h5 id="1-1-HeatmapRenderer属性"><a href="#1-1-HeatmapRenderer属性" class="headerlink" title="1.1 HeatmapRenderer属性"></a>1.1 HeatmapRenderer属性</h5><ul><li>blurRadius 圆的模糊半径(像素),</li><li>colorStops 颜色站点数组</li><li>colors 字符串数组的CSS颜色</li><li>field 属性的名称字段，用于热图点</li><li>maxPixelIntensity 分配的最终颜色渐变</li><li>inPixelIntensity 分配的最初颜色渐变</li></ul><h5 id="1-2-HeatmapRenderer方法"><a href="#1-2-HeatmapRenderer方法" class="headerlink" title="1.2 HeatmapRenderer方法"></a>1.2 HeatmapRenderer方法</h5><ul><li>setBlurRadius(blurRadius)设置渲染器的模糊半径</li><li>setColorStops(stops)设置colorStops属性，并返回HeatmapRenderer实例</li><li>setColors(colors)设置颜色用于插入颜色渲染器</li><li>setField(field)设置渲染器使用的属性字段</li></ul><ul><li><p>setMaxPixelIntensity(maxPixelIntensity)</p><p>设置渲染器的最终颜色渐变</p></li><li><p>setMinPixelIntensity(minPixelIntensity)</p><p>设置渲染器的最初颜色渐变</p></li><li><p>toJson()转换为JSON对象</p></li></ul><h4 id="2-SimpleRenderer"><a href="#2-SimpleRenderer" class="headerlink" title="2.SimpleRenderer"></a>2.SimpleRenderer</h4><ul><li><p>符号渲染器</p></li><li><p>构造函数1：</p><p>new SimpleRenderer(symbol)</p></li><li><p>构造函数2：</p><p>new SimpleRenderer(json)</p></li></ul><h5 id="2-1-SimpleRenderer属性"><a href="#2-1-SimpleRenderer属性" class="headerlink" title="2.1 SimpleRenderer属性"></a>2.1 SimpleRenderer属性</h5><ul><li>Description 渲染器的描述</li><li>label渲染器的标签</li><li>symbol渲染器的样式 </li><li>其他继承Renderer</li></ul><h5 id="2-2-SimpleRenderer方法"><a href="#2-2-SimpleRenderer方法" class="headerlink" title="2.2 SimpleRenderer方法"></a>2.2 SimpleRenderer方法</h5><ul><li>getSymbol(graphic)获得图形的样式</li><li>其他方法继承与Renderer</li></ul><h4 id="3-UniqueValueRenderer"><a href="#3-UniqueValueRenderer" class="headerlink" title="3.UniqueValueRenderer"></a>3.UniqueValueRenderer</h4><ul><li><p>图形组织匹配属性，一个唯一值渲染器，为每一个值添加渲染</p></li><li><p>构造函数1</p><p>new UniqueValueRenderer(defaultSymbol, attributeField, attributeField2?, attributeField3?, fieldDelimeter?)</p></li><li><p>构造函数2</p><p>new UniqueValueRenderer(json)</p></li></ul><h5 id="3-1-UniqueValueRenderer属性"><a href="#3-1-UniqueValueRenderer属性" class="headerlink" title="3.1 UniqueValueRenderer属性"></a>3.1 UniqueValueRenderer属性</h5><ul><li>attributeField</li><li>attributeField2</li><li>attributeField3</li><li>defaultLabel默认标题</li><li>defaultSymbol默认样式</li><li>fieldDelimiter字符串之间插入多个属性字段的值</li></ul><ul><li>infos  信息数字</li><li>opacityInfo  透明度信息</li><li>rotationInfo  角度信息</li><li>sizeInfo符号大小信息</li></ul><h5 id="3-2-UniqueValueRenderer方法"><a href="#3-2-UniqueValueRenderer方法" class="headerlink" title="3.2 UniqueValueRenderer方法"></a>3.2 UniqueValueRenderer方法</h5><ul><li><p>addValue(valueOrInfo, symbol?)添加渲染器  </p></li><li><p>getColor(graphic)  获取图形颜色</p></li><li><p>getOpacity(graphic)获取图形透明度</p></li><li><p>getRotationAngle(graphic)获取旋转角度</p></li><li><p>getSize(graphic)  获取图形字符大小</p></li><li><p>getSymbol(graphic)  获取图形样式</p></li></ul><ul><li>getUniqueValueInfo(graphic)获取图形渲染器  </li><li>removeValue(value)删除值</li><li>setColorInfo(info)  设置颜色信息</li><li>setOpacityInfo(info)设置透明度信息</li><li>setRotationInfo(info)  设置旋转信息</li><li>setSizeInfo()  设置符号大小信息</li><li>toJson()  转换为JSON对象</li></ul><h3 id="第24讲-Symbol（1）"><a href="#第24讲-Symbol（1）" class="headerlink" title="第24讲 Symbol（1）"></a>第24讲 Symbol（1）</h3><h4 id="主讲内容-21"><a href="#主讲内容-21" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Symbol</li><li>FillSymbol</li><li>LineSymbol</li><li>MarkerSymbol</li><li>PictureFillSymbol</li><li>PictureMarkerSymbol</li><li>SimpleFillSymbol</li><li>SimpleLineSymbol</li><li>SimpleMarkerSymbol</li><li>TextSymbol</li></ul><h4 id="1-Symbol"><a href="#1-Symbol" class="headerlink" title="1. Symbol"></a>1. Symbol</h4><ul><li><p>样式符号，是用来显示点、线和多边形图形层</p></li><li><p>属性</p><p>  color颜色</p><p>   type类型</p></li><li><p>方法</p><p>   setColor(color)设置颜色</p><p>   toJson()转换为JSON对象</p></li></ul><h4 id="2-FillSymbol"><a href="#2-FillSymbol" class="headerlink" title="2. FillSymbol"></a>2. FillSymbol</h4><ul><li><p>填充符号，是用来绘制多边形图形层特性</p></li><li><p>属性</p><p>  outline多边形的轮廓</p><p>  其他属性继承Symbol</p></li><li><p>方法</p><p>  setOutline(outline)设置多边形轮廓</p><p>  其他方法继承Symbol</p></li></ul><h4 id="3-LineSymbol"><a href="#3-LineSymbol" class="headerlink" title="3. LineSymbol"></a>3. LineSymbol</h4><ul><li><p>行符号，是用来绘制图形层线性特性</p></li><li><p>属性</p><p>  width线的宽度</p><p>  其他属性继承Symbol</p></li><li><p>方法</p><p>  setWidth(width)设置线的宽度</p><p>  其他方法继承Symbol</p></li></ul><h4 id="4-MarkerSymbol"><a href="#4-MarkerSymbol" class="headerlink" title="4. MarkerSymbol"></a>4. MarkerSymbol</h4><ul><li>标记符号，是用来画点和测点的图形层</li></ul><h5 id="4-1-MarkerSymbol属性"><a href="#4-1-MarkerSymbol属性" class="headerlink" title="4.1 MarkerSymbol属性"></a>4.1 MarkerSymbol属性</h5><ul><li>angle  标记的角度</li><li>color  符号颜色</li><li>size      符号大小</li><li>type  符号类型</li><li>xoffset  在x轴偏移量,像素</li><li>yoffset  在y轴偏移量,像素</li></ul><h5 id="4-2-MarkerSymbol方法"><a href="#4-2-MarkerSymbol方法" class="headerlink" title="4.2 MarkerSymbol方法"></a>4.2 MarkerSymbol方法</h5><ul><li>setAngle(angle)顺时针旋转，符号围绕其中心指定的角</li><li>setColor(color)设置颜色</li><li>setOffset(x, y) 设置偏移</li><li>setSize(size) 设置大小</li><li>toJson() 转换为Json 对象</li></ul><h4 id="5-PictureFillSymbol"><a href="#5-PictureFillSymbol" class="headerlink" title="5. PictureFillSymbol"></a>5. PictureFillSymbol</h4><ul><li><p>使用一个图像填充多边形符号，是用来绘制多边形图形层特性</p></li><li><p>构造函数1：</p><p>new PictureFillSymbol(url, outline, width, height)</p></li><li><p>构造函数2：</p><p>new PictureFillSymbol(json)</p></li></ul><h5 id="5-1-PictureFillSymbol属性"><a href="#5-1-PictureFillSymbol属性" class="headerlink" title="5.1 PictureFillSymbol属性"></a>5.1 PictureFillSymbol属性</h5><ul><li><p>Color   颜色</p></li><li><p>height  高度</p></li><li><p>outline  多边形的轮廓</p></li><li><p>ntype  类型</p></li><li><p>url  图片路径</p></li><li><p>width  宽度。</p></li></ul><ul><li>xoffset   x偏移量</li><li>xscale   在x方向比例因子。</li><li>yoffset  y偏移量</li><li>yscale 在y方向比例因子。</li></ul><h5 id="5-2-PictureFillSymbol方法"><a href="#5-2-PictureFillSymbol方法" class="headerlink" title="5.2 PictureFillSymbol方法"></a>5.2 PictureFillSymbol方法</h5><ul><li>setColor(color)  设置颜色</li><li>setHeight(height)设置高度</li><li>setOffset(x, y) 设置偏移量</li><li>setOutline(outline) 设置线轮廓</li><li>setUrl(url)设置图片地址</li><li>setWidth(width)设置宽度</li><li>setXScale(scale)设置x方向比例因子</li><li>setYScale(scale)设置y方向比例因子</li><li>toJson()转换为Json对象</li></ul><h4 id="6-PictureMarkerSymbol"><a href="#6-PictureMarkerSymbol" class="headerlink" title="6. PictureMarkerSymbol"></a>6. PictureMarkerSymbol</h4><ul><li><p>图片标记符号，是用来画点和测点的图形层</p></li><li><p>构造函数1:</p><p>new PictureMarkerSymbol(url, width, height)  </p></li><li><p>构造函数2：</p><p>new PictureMarkerSymbol(json)</p></li></ul><h5 id="6-1-PictureMarkerSymbol属性"><a href="#6-1-PictureMarkerSymbol属性" class="headerlink" title="6.1 PictureMarkerSymbol属性"></a>6.1 PictureMarkerSymbol属性</h5><ul><li>angle标记的角度</li><li>color 颜色</li><li>height 高度</li><li>size 大小</li><li>type 类型</li><li>url 图片路径</li><li>width宽度</li><li>xoffset x偏移量</li><li>yoffset  y偏移量</li></ul><h5 id="6-2-PictureMarkerSymbol方法"><a href="#6-2-PictureMarkerSymbol方法" class="headerlink" title="6.2 PictureMarkerSymbol方法"></a>6.2 PictureMarkerSymbol方法</h5><ul><li>setAngle(angle)  设置角度</li><li>setColor(color) 设置颜色</li><li>setHeight(height)设置高度</li><li>setOffset(x, y)  设置偏移量</li><li>setSize(size) 设置大小</li><li>setUrl(url)设置图片路径</li><li>setWidth(width)设置宽度</li><li>toJson() 转换为JSON对象</li></ul><h4 id="7-SimpleFillSymbol"><a href="#7-SimpleFillSymbol" class="headerlink" title="7. SimpleFillSymbol"></a>7. SimpleFillSymbol</h4><ul><li>填充符号是用来绘制多边形图形层特性。透明或交叉影线模式之一</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">SimpleFillSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleFillSymbol</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> outline<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleFillSymbol</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></code></pre><h5 id="7-1-SimpleFillSymbol属性"><a href="#7-1-SimpleFillSymbol属性" class="headerlink" title="7.1 SimpleFillSymbol属性"></a>7.1 SimpleFillSymbol属性</h5><ul><li>color 颜色</li><li>outline 轮廓</li><li>style 样式</li><li>type类型</li></ul><h5 id="7-2-SimpleFillSymbol方法"><a href="#7-2-SimpleFillSymbol方法" class="headerlink" title="7.2 SimpleFillSymbol方法"></a>7.2 SimpleFillSymbol方法</h5><ul><li>setColor(color)  设置颜色</li><li>setOutline(outline)设置线轮廓</li><li>setStyle(style)设置样式</li><li>toJson() 转换为Json对象</li></ul><h4 id="8-SimpleLineSymbol"><a href="#8-SimpleLineSymbol" class="headerlink" title="8. SimpleLineSymbol"></a>8. SimpleLineSymbol</h4><ul><li>行符号是用来绘制图形层线性特性。SimpleLineSymbol是实线或预定义的模式的破折号和点。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">SimpleLineSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleLineSymbol</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> color<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleLineSymbol</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></code></pre><h5 id="8-1-SimpleLineSymbol属性"><a href="#8-1-SimpleLineSymbol属性" class="headerlink" title="8.1 SimpleLineSymbol属性"></a>8.1 SimpleLineSymbol属性</h5><ul><li>color  颜色</li><li>style  样式</li><li>type  类型</li><li>width  宽度</li></ul><h5 id="8-2-SimpleLineSymbol方法"><a href="#8-2-SimpleLineSymbol方法" class="headerlink" title="8.2 SimpleLineSymbol方法"></a>8.2 SimpleLineSymbol方法</h5><ul><li>setColor(color)  设置颜色</li><li>setStyle(style)  设置样式</li><li>setWidth(width)  设置宽度</li><li>toJson()   转换为JSON对象</li></ul><h4 id="9-SimpleMarkerSymbol"><a href="#9-SimpleMarkerSymbol" class="headerlink" title="9. SimpleMarkerSymbol"></a>9. SimpleMarkerSymbol</h4><ul><li>标记符号是用来画点和测点的图形层。SimpleMarkerSymbol用于显示点作为一个简单的形状</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">SimpleMarkerSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleMarkerSymbol</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> size<span class="token punctuation">,</span> outline<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">SimpleMarkerSymbol</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></code></pre><h5 id="9-1-SimpleMarkerSymbol属性"><a href="#9-1-SimpleMarkerSymbol属性" class="headerlink" title="9.1 SimpleMarkerSymbol属性"></a>9.1 SimpleMarkerSymbol属性</h5><ul><li>angle  角度</li><li>color  颜色</li><li>outline  轮廓</li><li>size  大小</li><li>style  样式</li><li>type  类型</li><li>xoffset  x偏移量</li><li>yoffset  y偏移量</li></ul><h5 id="9-2-SimpleMarkerSymbol方法"><a href="#9-2-SimpleMarkerSymbol方法" class="headerlink" title="9.2 SimpleMarkerSymbol方法"></a>9.2 SimpleMarkerSymbol方法</h5><ul><li>setAngle(angle)设置角度</li><li>setColor(color)  设置颜色</li><li>setOffset(x, y)设置偏移量</li><li>setOutline(outline)设置轮廓线</li><li>setPath(path)设置路径</li><li>setSize(size)设置大小</li><li>setStyle(style)设置样式</li><li>toJson()转换为json对象</li></ul><h4 id="10-TextSymbol"><a href="#10-TextSymbol" class="headerlink" title="10. TextSymbol"></a>10. TextSymbol</h4><ul><li>文字符号，用于在图形上添加文本图层</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">TextSymbol</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">TextSymbol</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> font<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">TextSymbol</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></code></pre><h5 id="10-1-TextSymbol属性"><a href="#10-1-TextSymbol属性" class="headerlink" title="10.1 TextSymbol属性"></a>10.1 TextSymbol属性</h5><ul><li><p>align       文本对齐的点  </p></li><li><p>angle  文本的角度</p></li><li><p>color  颜色</p></li><li><p>decoration  文本上的装饰</p></li><li><p>font  字体</p></li><li><p>horizontalAlignment  水平对齐文本</p></li><li><p>kerning  决定是否调整间距字符在文本字符串</p></li></ul><ul><li><p>rotated  决定是否旋转文本字符串中的每个字符</p></li><li><p>text  文本字符串显示在图形层</p></li><li><p>type  符号的类型</p></li><li><p>verticalAlignment  垂直对齐文本。</p></li><li><p>xoffset  x偏移量</p></li><li><p>yoffset    y偏移量</p></li></ul><h5 id="10-2-TextSymbol方法"><a href="#10-2-TextSymbol方法" class="headerlink" title="10.2 TextSymbol方法"></a>10.2 TextSymbol方法</h5><ul><li>setAlign(align) 设置文本的对齐  </li><li>setAngle(angle) 设置文本的角度。</li><li>setColor(color)  设置颜色</li><li>setDecoration(decoration) 设置文本的装饰。</li><li>setFont(font) 设置字体</li><li>setHorizontalAlignment(alignment) 更新文本的水平对齐的象征</li><li>setKerning(kerning) 是否设置为文本字符串中的字符间距调整</li></ul><ul><li>setOffset(x, y)  设置文本的x和y偏移</li><li>setRotated(rotated) 设置文本字符串中的每个字符是否旋转。</li><li>setText(text) 设置文本字符串。</li><li>setVerticalAlignment(alignment) 更新文本的垂直对齐</li><li>toJson() 转换为JSON对象</li></ul><h3 id="第24讲-Symbol（2）实例"><a href="#第24讲-Symbol（2）实例" class="headerlink" title="第24讲 Symbol（2）实例"></a>第24讲 Symbol（2）实例</h3><h3 id="第26讲-API查看"><a href="#第26讲-API查看" class="headerlink" title="第26讲 API查看"></a>第26讲 API查看</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> dojo </tag>
            
            <tag> Arcgis JS Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第03章 dojo基础</title>
      <link href="/2019/05/08/qian-duan/03-dojo-basic/"/>
      <url>/2019/05/08/qian-duan/03-dojo-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="第03章-dojo基础"><a href="#第03章-dojo基础" class="headerlink" title="第03章 dojo基础"></a>第03章 dojo基础</h2><h3 id="第1讲-dojo简介"><a href="#第1讲-dojo简介" class="headerlink" title="第1讲 dojo简介"></a>第1讲 dojo简介</h3><h4 id="主讲内容"><a href="#主讲内容" class="headerlink" title="主讲内容"></a>主讲内容</h4><pre class=" language-javascript"><code class="language-javascript">Dojo  简介Dojo  架构Dojo Toolkit 简介Dojo Toolkit 的特性Dojo 包环境搭建Dojo Hello World 应用程序</code></pre><h4 id="1-Dojo-简介"><a href="#1-Dojo-简介" class="headerlink" title="1. Dojo 简介"></a>1. Dojo 简介</h4><ul><li>Dojo 是一个 JavaScript 实现的开源 DHTML 工具包。它是在几个项目捐助基础上建立起来的(nWidgets，f(m)，Burstlib) 。 Dojo 的最初目标是解决开发 DHTML 应用程序遇到的一些长期存在的历史问题，现在，Dojo 已经成为了开发 RIA 应用程序的利器：</li><li>Dojo 让您更容易地为 Web 页面添加动态能力，您也可以在其它支持 JavaScript 的环境中使用 Dojo ；<br>利用 Dojo 提供的组件，您可以提升 Web 应用程序的可用性和交互能力；</li><li>Dojo 很大程度上屏蔽了浏览器之间的差异性，因此，您可以不用担心 Web 页面是否在某些浏览器中可用；<br>通过 Dojo 提供的工具，您还可以为代码编写命令行式的单元测试代码。</li><li>Dojo 的打包工具可以帮助您优化 JavaScript 代码，并且只生成部署应用程序所需的最小 Dojo 包集合。</li><li>接下来，我们看看 Dojo 是如何组织这些功能组件的。</li></ul><h4 id="2-dojo架构"><a href="#2-dojo架构" class="headerlink" title="2. dojo架构"></a>2. dojo架构</h4><ul><li>1.语言库</li><li>2.特殊环境库</li><li>3.应用支撑库</li><li>4.工具包库</li></ul><p><img src="/2019/05/08/qian-duan/03-dojo-basic/dojo架构.png" alt="dojo架构"></p><h4 id="3-Dojo-Toolkit-简介"><a href="#3-Dojo-Toolkit-简介" class="headerlink" title="3. Dojo Toolkit 简介"></a>3. Dojo Toolkit 简介</h4><ul><li>Dojo Toolkit是Dojo开发组件库</li><li>Dojo Toolkit 的特性可以分到 4 个不同部分</li></ul><h4 id="3-1-Dojo-Toolkit-的特性-Base"><a href="#3-1-Dojo-Toolkit-的特性-Base" class="headerlink" title="3.1 Dojo Toolkit 的特性-Base"></a>3.1 Dojo Toolkit 的特性-Base</h4><ul><li><strong>Base</strong> 包提供 <strong>Dojo</strong> Toolkit 的基础，包括一些功能，比如DOM使用函数、CSS3基于选择器的DOM查询、事件处理、基本的动画、以及<strong>Dojo</strong> 基于类的面向对象特性。</li></ul><h4 id="3-2-Dojo-Toolkit-的特性-Core"><a href="#3-2-Dojo-Toolkit-的特性-Core" class="headerlink" title="3.2 Dojo Toolkit 的特性-Core"></a>3.2 Dojo Toolkit 的特性-Core</h4><ul><li>Core 包包含一些 Base 中没有包含的附加特性。通常，这些特性不像 Base 中的特性那样频繁使用；因此，它们单独加载减轻 Base 包的负担。从这一点上来讲，Core 包提供一些实际有用的组件，包括高级动画拖放、I/O、数据管理、国际化（i18n）、浏览器历史管理。</li></ul><h4 id="3-3-Dojo-Toolkit-的特性-Dijit"><a href="#3-3-Dojo-Toolkit-的特性-Dijit" class="headerlink" title="3.3 Dojo Toolkit 的特性-Dijit"></a>3.3 Dojo Toolkit 的特性-Dijit</h4><ul><li>Dijit 包包含 <strong>Dojo</strong> 小部件和组件的扩展UI库。这些小部件的一些示例包括对话框、日历、调色板、工具提示和树。它也包括一些表单控件，这比标准HTML表单控件提供更多的功能，还有一些完整的布局管理选项。</li></ul><h4 id="3-4-Dojo-Toolkit-的特性-DojoX"><a href="#3-4-Dojo-Toolkit-的特性-DojoX" class="headerlink" title="3.4 Dojo Toolkit 的特性-DojoX"></a>3.4 Dojo Toolkit 的特性-DojoX</h4><ul><li><strong>Dojo</strong> eXtensions (DojoX) 包含工具箱的各个子项目。位于DojoX中的大多数是实验特性，但是也有一些稳定组件和特性。</li></ul><h4 id="4-Dojo-包整理"><a href="#4-Dojo-包整理" class="headerlink" title="4. Dojo 包整理"></a>4. Dojo 包整理</h4><p>01.dojo包的整理.docx</p><h4 id="5-环境搭建"><a href="#5-环境搭建" class="headerlink" title="5. 环境搭建"></a>5. 环境搭建</h4><ul><li>环境搭建</li><li><a href="http://dojotoolkit.org/download/" target="_blank" rel="noopener">http://dojotoolkit.org/download/</a></li></ul><h3 id="第2讲-忽略"><a href="#第2讲-忽略" class="headerlink" title="第2讲 忽略"></a>第2讲 忽略</h3><h3 id="第3讲DOM操作"><a href="#第3讲DOM操作" class="headerlink" title="第3讲DOM操作"></a>第3讲DOM操作</h3><h4 id="主讲内容-1"><a href="#主讲内容-1" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>dojo.ready</li><li>dojo.byId</li><li>dojo.query</li><li>dojo.body</li><li>dojo.create</li><li>dojo.destroy</li></ul><h4 id="1-dojo-ready"><a href="#1-dojo-ready" class="headerlink" title="1. dojo.ready"></a>1. dojo.ready</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dojo.ready </span>加载代码dojodojo<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-dojo-byId"><a href="#2-dojo-byId" class="headerlink" title="2. dojo.byId"></a>2. dojo.byId</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dojo.byId</span>dojo<span class="token punctuation">.</span>byId 函数使您可以通过 id 属性选择一个 DOM 节点。该函数是标准 document<span class="token punctuation">.</span>getElementById 函数的一个别名，但是显然简短易书写。dojo<span class="token punctuation">.</span><span class="token function">byId</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取ID为demo的元素</span></code></pre><h4 id="3-dojo-query"><a href="#3-dojo-query" class="headerlink" title="3. dojo.query"></a>3. dojo.query</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dojo.query</span>  虽然dojo<span class="token punctuation">.</span>byId可以方便的根据id来获取一个DOM节点，但是根据id获取每一个元素几乎是不可能的，因为id是唯一标识。如果一次想获取几个元素，我们可以通过dojo<span class="token punctuation">.</span>query方法。  dojo<span class="token punctuation">.</span>query 函数接受一个字符串参数，使用一个 CSS3 选择器引用您想选择的元素。这种操作方式很像jquery对DOM的操作。如果我们想获取页面中的某一个<span class="token keyword">class</span>的所有元素，只需要使用以下代码：  dojo<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span> 这个方法将返回一个NodeList，我们可以通过遍历这个list来操作每一个元素。</code></pre><h4 id="4-dojo-body"><a href="#4-dojo-body" class="headerlink" title="4. dojo.body"></a>4. dojo.body</h4><ul><li><p>dojo.body方法返回document的body元素</p></li><li><p>console.log( dojo.body() );</p></li></ul><h4 id="5-dojo-create"><a href="#5-dojo-create" class="headerlink" title="5. dojo.create"></a>5. dojo.create</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dojo.create</span></code></pre><ul><li>dojo.create(str, attrs, refNode, pos)</li><li>元素类型</li><li>属性</li><li>添加到哪里</li><li>添加到的位置</li></ul><h5 id="pos"><a href="#pos" class="headerlink" title="pos"></a>pos</h5><ul><li><ol><li>[null] 新创建的元素将作为refNode的子元素, 且添加到refNode中最后的位置 </li></ol></li><li><ol start="2"><li>[before] 新创建的元素将作为refNode的同辈元素, 且位于refNode的前边 </li></ol></li><li><ol start="3"><li>[after] 新创建的元素将作为refNode的同辈元素, 且位于refNode的后边 </li></ol></li><li><ol start="4"><li>[only] 新创建的元素将取代父元素内所有子元素, 添加到refNode内部 </li></ol></li><li><ol start="5"><li>[replace] 新创建的元素将直接替换点父元素 </li></ol></li><li><ol start="6"><li>[first] 新创建的元素将作为refNode的子元素, 并添加到所有子元素的最前边 </li></ol></li><li><ol start="7"><li>[last] 新创建的元素将作为refNode的子元素, 并添加到所有子元素的最后边</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript">pos  </code></pre><h4 id="6-dojo-destroy"><a href="#6-dojo-destroy" class="headerlink" title="6. dojo.destroy"></a>6. dojo.destroy</h4><ul><li>dojo.destroy方法会从父元素中删除该元素，并删掉该元素的所有子元素</li><li>var node = dojo.byId(“node”); </li><li>dojo.empty(node); //删除节点的所有子节点(简单描述: 清空节点)</li><li>dojo.destroy(node);删除节点及其所有子点(简单描述: 删除节点)</li></ul><pre class=" language-javascript"><code class="language-javascript">dojo<span class="token punctuation">.</span>destroy</code></pre><h3 id="第4讲dojo面向对象"><a href="#第4讲dojo面向对象" class="headerlink" title="第4讲dojo面向对象"></a>第4讲dojo面向对象</h3><ul><li>什么是面向对象</li><li>类的声明</li><li>定义继承</li><li>定义静态域</li><li>调用父类方法</li><li>定义扩展(extend)</li></ul><h4 id="1-什么是面向对象"><a href="#1-什么是面向对象" class="headerlink" title="1. 什么是面向对象"></a>1. 什么是面向对象</h4><ul><li>对象指的就是世界万物</li><li>面向对象就是基于对象，面向对象的编程就是基于对象的编程，程序中的任何操作都是基于对象的操作。</li><li>在计算机中对象是抽象的，所谓抽象就是，无所谓是否存在，通过想象设计的物。</li></ul><h4 id="2-dojo类的声明-定义"><a href="#2-dojo类的声明-定义" class="headerlink" title="2. dojo类的声明-定义"></a>2. dojo类的声明-定义</h4><ul><li>类是创建对象的对象</li><li>语法：dojo.declare(className,superclass, props);</li></ul><h4 id="2-1-dojo类的声明-语法"><a href="#2-1-dojo类的声明-语法" class="headerlink" title="2.1 dojo类的声明-语法"></a>2.1 dojo类的声明-语法</h4><ul><li>dojo.declare(className,superclass, props);</li><li>其中className定义了类型的名称。superclass指定了父类型，如果想声明的类并不存在父类，那么superclass可以为null。由于在Dojo中支持多继承，因此superclass可以是一个包含了所有父类的数组。最后的props是一个对象，其中包含了该类的所有字段以及方法。在props中可以定义一个特殊的函数constructor，constructor在该类型被实例化的时候会被自动调用到，相当于构造函数。</li></ul><h4 id="2-2-dojo类的声明-实例"><a href="#2-2-dojo类的声明-实例" class="headerlink" title="2.2 dojo类的声明-实例"></a>2.2 dojo类的声明-实例</h4><pre class=" language-javascript"><code class="language-javascript">dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">'People'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span>‘小明'<span class="token punctuation">,</span>      constructor<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h4 id="3-定义继承"><a href="#3-定义继承" class="headerlink" title="3. 定义继承"></a>3. 定义继承</h4><ul><li>dojo.declare除了能够声明类，还能对类进行扩展，进而达到继承目的</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义“人”这个类</span>dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">'People'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span><span class="token string">'unknown name'</span><span class="token punctuation">,</span>      action<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//do nothing  </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>      constructor<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义学生这个类</span>dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">'Student'</span><span class="token punctuation">,</span>People<span class="token punctuation">,</span><span class="token punctuation">{</span>      school<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>      action<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//I am studing  </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>      constructor<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>school<span class="token operator">=</span>school<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类的使用</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'Harvard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">.</span>name    <span class="token comment" spellcheck="true">// Jack  </span>s<span class="token punctuation">.</span>school 　<span class="token comment" spellcheck="true">// Harvard  </span>s<span class="token punctuation">.</span>action 　<span class="token comment" spellcheck="true">// I am studing</span></code></pre><h4 id="4-定义静态域"><a href="#4-定义静态域" class="headerlink" title="4. 定义静态域"></a>4. 定义静态域</h4><ul><li>传统的面向对象语言都直接在语言层面上支持静态域的概念。例如JAVA，其静态域包括静态类型的字段以及方法，静态类型的字段由所有的实例共享，而静态方法可以由类型直接调用，故其中不能访问非静态字段（只能先产生实例，在通过实例访问字段）。JS并没有直接支持静态域这个概念，但可以通过模拟的方式来达到静态域的效果。下面一个例子展示了Dojo中如何定义静态域：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义静态域 staticFields</span>dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      staticFields<span class="token punctuation">:</span> <span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>staticFields<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>staticFields<span class="token punctuation">.</span>num <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 </span></code></pre><h4 id="5-调用父类方法"><a href="#5-调用父类方法" class="headerlink" title="5. 调用父类方法"></a>5. 调用父类方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 调用父类方法</span>dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      constructor<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dojo<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token string">"Bar"</span><span class="token punctuation">,</span> Foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>      constructor<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动调用,打印foo bar  </span></code></pre><h4 id="6-定义扩展-extend"><a href="#6-定义扩展-extend" class="headerlink" title="6. 定义扩展(extend)"></a>6. 定义扩展(extend)</h4><ul><li>extend对类型进行扩展，增加原先没有的新属性（方法）。当然也可以用它来添加重名的属性，不过这样会有一定的风险替换掉原先已经定义的属性。</li></ul><pre class=" language-shell"><code class="language-shell">dojo.declare('A',null,{      func1:function(){ console.log('fun1')}  });  A.extend({      func1:function(){ console.log('fun2')},      func2:function(){ console.log('fun3')}  });  var a=new A;  a.func1();      //fun2  a.func2();    </code></pre><h3 id="第5讲Dojo常用函数"><a href="#第5讲Dojo常用函数" class="headerlink" title="第5讲Dojo常用函数"></a>第5讲Dojo常用函数</h3><h4 id="主讲内容-2"><a href="#主讲内容-2" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>Require函数</li><li>Define函数</li><li>Request函数</li><li>Declare函数</li><li>On函数</li></ul><h4 id="1-Require函数的使用"><a href="#1-Require函数的使用" class="headerlink" title="1. Require函数的使用"></a>1. Require函数的使用</h4><ul><li>Require函数的作用主要是引入组件和模块作用</li><li>如： dojo. require(“dijit.form.Button”);</li><li>新的用方法：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>“dijit<span class="token operator">/</span>form<span class="token operator">/</span>Button”<span class="token punctuation">,</span> “dojox<span class="token operator">/</span>layout<span class="token operator">/</span>ContentPane”<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Button<span class="token punctuation">,</span> ContentPane<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-Define函数"><a href="#2-Define函数" class="headerlink" title="2. Define函数"></a>2. Define函数</h4><ul><li>作用是定义一个模块（module）。这个模块可以被require引用，引用了之后就可以使用define里面的东西</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">"dojo/dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        setRed<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>            dom<span class="token punctuation">.</span><span class="token function">byId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h5 id="2-1-Require调用Define定义的模块"><a href="#2-1-Require调用Define定义的模块" class="headerlink" title="2.1. Require调用Define定义的模块"></a>2.1. Require调用Define定义的模块</h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token function">require</span><span class="token punctuation">(</span>          <span class="token punctuation">[</span> <span class="token string">"dojo/ready"</span><span class="token punctuation">,</span> <span class="token string">"test/util"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token function">function</span><span class="token punctuation">(</span>ready<span class="token punctuation">,</span> util<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">ready</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  var id <span class="token operator">=</span> <span class="token string">"selected_text"</span><span class="token punctuation">;</span>                  util<span class="token punctuation">.</span><span class="token function">setRed</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="3-Request函数"><a href="#3-Request函数" class="headerlink" title="3. Request函数"></a>3. Request函数</h4><ul><li>处理ajax，异步通信</li><li>Request（URL, Option)</li><li>dojo/request函数（以及该模块下所有的发起请求的函数）的签名包含一个URL以及一个选项对象。这个选项对象中可以配置有关这次请求的各种参数。通常情况下使用dojo/request非常简单，只需要传递一个字符串，option参数是可省略的。让我们来看看option对象中的常用配置参数：</li></ul><h5 id="3-1-option参数"><a href="#3-1-option参数" class="headerlink" title="3.1 option参数"></a>3.1 option参数</h5><ul><li>method: 用于本请求的HTTP方法（默认是GET，dojo/request/script会忽略这个参数）</li><li>query: 形如key=value的字符串，或者形如{key: ‘value’}的对象，包含所有的query参数</li><li>data: 字符串或对象（会被dojo/io-query.objectToQuery串行化成字符串），表示需要发送的数据（GET和DELET请求会忽略这个参数）</li><li>handleAs: 表示如何处理服务器端响应的字符串，默认”text”，其他可能的值包括’json’, ‘javascript’,以及’xml’</li><li>headers: 形如{‘Header-Name’: ‘value’}的对象，包含请求所需要的各种头部属性</li><li>timeout: 表示等待多少毫秒算超时的整数，一旦超时将取消请求并”拒绝（reject）”所返回的promise。</li></ul><h5 id="3-2-Request函数-返回"><a href="#3-2-Request函数-返回" class="headerlink" title="3.2 Request函数-返回"></a>3.2 Request函数-返回</h5><ul><li>dojo/request所返回的promise对象具有一个普通promise没有的附加属性：response。这个属性本身也是一个promise，它将提供一个对象来更详细地描述这次响应：</li><li>url: 发起请求的最终URL（加上了query字符串）</li><li>options: 请求相关的参数</li><li>text: 响应中数据的字符串表示</li><li>data: 对响应进行处理后返回的数据（如果handles参数指定了有效的解析方式）</li><li>getHeader(headerName): 用于获取请求头部参数的函数；如果某个provider没有提供头部信息，这个函数将返回null。</li></ul><h5 id="3-3-Request函数-实例"><a href="#3-3-Request函数-实例" class="headerlink" title="3.3 Request函数-实例"></a>3.3 Request函数-实例</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Require</span><span class="token punctuation">(</span>“dojo<span class="token operator">/</span>request”<span class="token punctuation">,</span><span class="token function">Function</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">Request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">Function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理成功返回的数据</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理请求的失败</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理progress事件</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-Declare函数"><a href="#4-Declare函数" class="headerlink" title="4. Declare函数"></a>4. Declare函数</h4><ul><li>Declare函数定义类</li></ul><pre class=" language-javascript"><code class="language-javascript"></code></pre><h4 id="5-On函数"><a href="#5-On函数" class="headerlink" title="5. On函数"></a>5. On函数</h4><ul><li>事件绑定函数</li><li>绑定单击事件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">on</span><span class="token punctuation">(</span>myButton<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第6讲-dojo配置dojoConfig、ContentPanes和FloatingPanes面板"><a href="#第6讲-dojo配置dojoConfig、ContentPanes和FloatingPanes面板" class="headerlink" title="第6讲 dojo配置dojoConfig、ContentPanes和FloatingPanes面板"></a>第6讲 dojo配置dojoConfig、ContentPanes和FloatingPanes面板</h3><h4 id="主讲内容-3"><a href="#主讲内容-3" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>dojo配置dojoCoonfig</li><li>ContentPanes</li><li>Floatingpanes</li></ul><h4 id="1-dojo配置dojoCoonfig"><a href="#1-dojo配置dojoCoonfig" class="headerlink" title="1. dojo配置dojoCoonfig"></a>1. dojo配置dojoCoonfig</h4><ul><li>dojoConfig用于设置一些在Dojo运行时的选项和默认的行为方式。</li><li>首先要定义dojoConfig设置一些属性，然后加载dojo.js，如果这个过程反过来，那dojoConfig的配置则无效。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dojo配置dojoConfig</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    dojoConfig<span class="token operator">=</span> <span class="token punctuation">{</span>        has<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"dojo-firebug"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        parseOnLoad<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        foo<span class="token punctuation">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span>        <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        aliases<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">"ready"</span><span class="token punctuation">,</span> <span class="token string">"dojo/domReady"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"registry"</span><span class="token punctuation">,</span><span class="token string">"dijit/registry"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"dialog"</span><span class="token punctuation">,</span><span class="token string">"dijit/Dialog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"parser"</span><span class="token punctuation">,</span><span class="token string">"dojo/parser"</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        packages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"js"</span><span class="token punctuation">,</span>            location<span class="token punctuation">:</span> <span class="token string">"/js"</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>，        locale<span class="token punctuation">:</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/locale=([\w\-]+)/</span><span class="token punctuation">)</span> <span class="token operator">?</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">:</span> <span class="token string">"en-us"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="1-1-has"><a href="#1-1-has" class="headerlink" title="1.1 has()"></a>1.1 has()</h5><p>has()用来设置一些Dojo支持的系统特性。</p><pre class=" language-javascript"><code class="language-javascript">has<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"dojo-firebug"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 加载Dojo版的Firebug调试环境，如果浏览器没有自带调试工具，可以用这个 </span>  <span class="token string">"dojo-debug-messages"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 显示调试信息，针对于一些废弃的或测试中的功能特性在运行时的信息</span><span class="token punctuation">}</span></code></pre><h5 id="1-2-Loader-Configuration"><a href="#1-2-Loader-Configuration" class="headerlink" title="1.2 Loader Configuration"></a>1.2 Loader Configuration</h5><ul><li>Loader Configuration加载时一些常用选项 </li></ul><h5 id="1-3-packages"><a href="#1-3-packages" class="headerlink" title="1.3 packages"></a>1.3 packages</h5><ul><li>提供包名及其路径</li></ul><pre class=" language-javascript"><code class="language-javascript">packages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"myapp"</span><span class="token punctuation">,</span>    location<span class="token punctuation">:</span> <span class="token string">"/js/myapp"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h5 id="1-4-设置别名"><a href="#1-4-设置别名" class="headerlink" title="1.4 设置别名"></a>1.4 设置别名</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置别名</span>aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// [alias name, true name]</span>    <span class="token punctuation">[</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token string">"dojo/cookie"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h5 id="1-5-async"><a href="#1-5-async" class="headerlink" title="1.5 async"></a>1.5 async</h5><ul><li>nasync:true/false/legacyAsync // 是否异步加载</li></ul><h5 id="1-6-parseOnLoad"><a href="#1-6-parseOnLoad" class="headerlink" title="1.6 parseOnLoad"></a>1.6 parseOnLoad</h5><ul><li>nparseOnLoad:true/false<br>//是否在DOM和所有初始化完成后由dojo.parser解析页面</li></ul><h5 id="1-7-locale"><a href="#1-7-locale" class="headerlink" title="1.7 locale"></a>1.7 locale</h5><ul><li>本地化与国际化<br>locale:location.search.match(/locale=([\w-]+)/)? RegExp.$1 : “en-us”</li></ul><h4 id="2-ContentPanes"><a href="#2-ContentPanes" class="headerlink" title="2. ContentPanes"></a>2. ContentPanes</h4><ul><li>ContentPanes是所有小部件的基石，其他任何小部件都可以用他作为内容或者子小部件的载体</li></ul><h4 id="3-FloatingPanes"><a href="#3-FloatingPanes" class="headerlink" title="3. FloatingPanes"></a>3. FloatingPanes</h4><ul><li>Floatingpanes浮动面板，可以模拟Windows窗口的效果在页面上随意拖动</li></ul><h3 id="第7讲-BorderContainer和堆叠容器"><a href="#第7讲-BorderContainer和堆叠容器" class="headerlink" title="第7讲 BorderContainer和堆叠容器"></a>第7讲 BorderContainer和堆叠容器</h3><h4 id="主讲内容-4"><a href="#主讲内容-4" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>BorderContainer</li><li>堆叠容器</li></ul><h4 id="1-BorderContainer"><a href="#1-BorderContainer" class="headerlink" title="1. BorderContainer"></a>1. BorderContainer</h4><ul><li>BorderContainer是一个布局容器，主要分为5个区域，上下左右中</li><li>每个BorderContainer都有两种不同的方式布局，可以通过“design”属性来控制，分别是headline和sidebar.</li></ul><h5 id="1-1-headline"><a href="#1-1-headline" class="headerlink" title="1.1 headline"></a>1.1 headline</h5><p><img src="/2019/05/08/qian-duan/03-dojo-basic/BorderContainer布局1-headline.png" alt="BorderContainer布局1-headline"></p><h5 id="1-2-sidebar"><a href="#1-2-sidebar" class="headerlink" title="1.2 sidebar"></a>1.2 sidebar</h5><p><img src="/2019/05/08/qian-duan/03-dojo-basic/BorderContainer布局2-sidebar.png" alt="BorderContainer布局2-sidebar"></p><h4 id="2-堆叠容器"><a href="#2-堆叠容器" class="headerlink" title="2. 堆叠容器"></a>2. 堆叠容器</h4><ul><li><p>当页面中的内容比较多时候，可以使用堆叠容器显示部分元素，主要有3中类型</p></li><li><p>StackContainer</p><p>最普遍的一种，需要自己编写控制和代码</p></li><li><p>AccordionContainer</p><p>导航按钮在面板内显示</p></li><li><p>TabContainer</p><p>按钮在前端一字排开</p></li></ul><h3 id="第8讲-自定义小部件和内部小部件基类"><a href="#第8讲-自定义小部件和内部小部件基类" class="headerlink" title="第8讲 自定义小部件和内部小部件基类"></a>第8讲 自定义小部件和内部小部件基类</h3><h4 id="主讲内容-5"><a href="#主讲内容-5" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>行为性与非行为性小部件</li><li>模块化小部件</li><li>内部小部件基类</li></ul><h4 id="1-行为性小部件"><a href="#1-行为性小部件" class="headerlink" title="1. 行为性小部件"></a>1. 行为性小部件</h4><ul><li>这类小部件直接使用DOM树创建自己的DOM树</li></ul><h4 id="2-非行为性小部件"><a href="#2-非行为性小部件" class="headerlink" title="2. 非行为性小部件"></a>2. 非行为性小部件</h4><ul><li>非行为性小部件，最低的要求是创建一个DOM树，小部件的DOM树保存到domNode属性中</li></ul><h4 id="3-模块化小部件"><a href="#3-模块化小部件" class="headerlink" title="3. 模块化小部件"></a>3. 模块化小部件</h4><ul><li>使用_TemplatedMixin实现小部件定义与小部件行为的实现分离开，实现模块化小部件</li></ul><h4 id="4-Widget接口"><a href="#4-Widget接口" class="headerlink" title="4. _Widget接口"></a>4. _Widget接口</h4><ul><li>该接口用于定义一些设置方法，通过这些方法可以利用小部件管理器等类来统一管理小部件</li></ul><h4 id="5-小部件基类-BaseWidget代码"><a href="#5-小部件基类-BaseWidget代码" class="headerlink" title="5. 小部件基类_BaseWidget代码"></a>5. 小部件基类_BaseWidget代码</h4><ul><li>小部件基类_BaseWidget代码</li></ul><h3 id="第9讲-可移动小部件"><a href="#第9讲-可移动小部件" class="headerlink" title="第9讲 可移动小部件"></a>第9讲 可移动小部件</h3><h4 id="主讲内容-6"><a href="#主讲内容-6" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>dojo/dnd/Moveable 移动组件</li><li>dojo/dom 文档组件</li><li>dojo/dom-style 样式组件</li></ul><h3 id="第10讲-模型与代码分离式小部件"><a href="#第10讲-模型与代码分离式小部件" class="headerlink" title="第10讲 模型与代码分离式小部件"></a>第10讲 模型与代码分离式小部件</h3><h4 id="建设步骤"><a href="#建设步骤" class="headerlink" title="建设步骤"></a>建设步骤</h4><ul><li>构建模型</li><li>编写代码</li><li>组件调用</li></ul><h3 id="第11讲-动画控制"><a href="#第11讲-动画控制" class="headerlink" title="第11讲 动画控制"></a>第11讲 动画控制</h3><h4 id="主讲内容-7"><a href="#主讲内容-7" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>动画类库dojo/_base/fx</li></ul><h4 id="1-动画类库dojo-base-fx-主要方法"><a href="#1-动画类库dojo-base-fx-主要方法" class="headerlink" title="1. 动画类库dojo/_base/fx 主要方法"></a>1. 动画类库dojo/_base/fx 主要方法</h4><ul><li>FadeIn()</li><li>FadeOut()</li><li>AnimateProperty()</li></ul><h4 id="2-FadeIn-语法"><a href="#2-FadeIn-语法" class="headerlink" title="2. FadeIn() 语法"></a>2. FadeIn() 语法</h4><ul><li>FadeIn(dom节点对象)</li></ul><h4 id="3-FadeOut"><a href="#3-FadeOut" class="headerlink" title="3. FadeOut()"></a>3. FadeOut()</h4><ul><li>FadeOut(dom节点对象)</li></ul><h4 id="4-AnimateProperty-属性"><a href="#4-AnimateProperty-属性" class="headerlink" title="4. AnimateProperty()属性"></a>4. AnimateProperty()属性</h4><ul><li><p>Node:dom节点的ID</p></li><li><p>Properties属性</p></li><li>Duration:动画时间</li><li>Rate：时间类型</li><li>Easing:指定动画缓和曲线函数</li><li>事件处理函数：如OnEnd</li></ul><h4 id="5-AnimateProperty-主要方法"><a href="#5-AnimateProperty-主要方法" class="headerlink" title="5. AnimateProperty()主要方法"></a>5. AnimateProperty()主要方法</h4><ul><li>Play()动画播放</li><li>Pause()动画暂停</li><li>Status()返回动画当前状态</li><li>Stop(gotoEnd)停止播放，gotoEnd为true时候，当前位置位置为1%</li></ul><h2 id="第12讲-订阅、发布模式的事件处理机制"><a href="#第12讲-订阅、发布模式的事件处理机制" class="headerlink" title="第12讲 订阅、发布模式的事件处理机制"></a>第12讲 订阅、发布模式的事件处理机制</h2><h4 id="主讲内容-8"><a href="#主讲内容-8" class="headerlink" title="主讲内容"></a>主讲内容</h4><ul><li>简介</li><li>Subscribe</li><li>publish</li></ul><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.  简介"></a>1.  简介</h4><ul><li>订阅/发布模式可以说是一个预定系统，用户先预定自己感兴趣的主题，当此类主题发布时，将在第一时间得到通知。在订阅/发布模式下，预订的时候并不确定主题是否已经存在，以后是否会发布，只是在主题发布后，会立即得到通知。在DOJO中，跟订阅/发布有关的函数位于dojo/topic模块中，有两个：subscribe和publish</li></ul><h4 id="2-Subscribe"><a href="#2-Subscribe" class="headerlink" title="2. Subscribe"></a>2. Subscribe</h4><ul><li><p>Subscribe函数用来订阅某一主题，将接收两个参数，</p><p>1.主题名字，为一个字符串，必须能够唯一标示的主题<br>2.参数的回调函数。Subscribe返回一个句柄，该句柄的remove方法用于取消订阅</p></li></ul><h4 id="3-Publish"><a href="#3-Publish" class="headerlink" title="3. Publish"></a>3. Publish</h4><ul><li>Publish用于发布某个主题，将接收多个参数，1.为发布信息的名字，其他参数为传递给订阅回调函数的参数。</li></ul><h3 id="第13讲-常用组件"><a href="#第13讲-常用组件" class="headerlink" title="第13讲 常用组件"></a>第13讲 常用组件</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 学习方法</span>百度搜索<span class="token operator">:</span>dojo menu</code></pre><h3 id="第14讲-dojo的ajax与webservice通信"><a href="#第14讲-dojo的ajax与webservice通信" class="headerlink" title="第14讲 dojo的ajax与webservice通信"></a>第14讲 dojo的ajax与webservice通信</h3><pre class=" language-javascript"><code class="language-javascript"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> dojo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 shift+鼠标右键 cmd变成powershell，改回显示cmd</title>
      <link href="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/"/>
      <url>/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="1-win10-shift鼠标右键-cmd变成powershell，改回显示cmd"><a href="#1-win10-shift鼠标右键-cmd变成powershell，改回显示cmd" class="headerlink" title="1. win10 shift鼠标右键 cmd变成powershell，改回显示cmd"></a>1. win10 shift鼠标右键 cmd变成powershell，改回显示cmd</h2><ol><li>第一步：打开注册表编辑器  win+R 输入 regedit</li><li><p>第二步：找到“计算机\HKEY_CLASSES_ROOT\Directory\Background\shell”</p></li><li><p>第三步：找到cmd，右键权限，管理员权限设置为“完全控制”</p></li></ol><ul><li>“HideBasedOnVelocityId”重命名“ShowBasedOnVelocityId”，即显示在shift右键菜单中</li><li>同理：找到Powershell，右键权限，管理员权限设置为“完全控制”</li><li>“ShowBasedOnVelocityId”重命名“HideBasedOnVelocityId”，即隐藏在shift右键菜单中</li></ul><h3 id="1-1-显示cmd-reg"><a href="#1-1-显示cmd-reg" class="headerlink" title="1.1 显示cmd.reg"></a>1.1 显示cmd.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\cmd]@="@shell32.dll,-8506""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=-"ShowBasedOnVelocityId"=dword:00639bc8</code></pre><h3 id="1-2-隐藏Powershell"><a href="#1-2-隐藏Powershell" class="headerlink" title="1.2 隐藏Powershell"></a>1.2 隐藏Powershell</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell]@="@shell32.dll,-8508""Extended"="""HideBasedOnVelocityId"=dword:00639bc8"ShowBasedOnVelocityId"=-</code></pre><h3 id="1-3-改回默认配置-隐藏cmd-reg"><a href="#1-3-改回默认配置-隐藏cmd-reg" class="headerlink" title="1.3 改回默认配置-隐藏cmd.reg"></a>1.3 改回默认配置-隐藏cmd.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\cmd]@="@shell32.dll,-8506""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=dword:00639bc8"ShowBasedOnVelocityId"=-</code></pre><h3 id="1-4-改回默认配置-显示Powershell-reg"><a href="#1-4-改回默认配置-显示Powershell-reg" class="headerlink" title="1.4 改回默认配置-显示Powershell.reg"></a>1.4 改回默认配置-显示Powershell.reg</h3><pre class=" language-shell"><code class="language-shell">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell]@="@shell32.dll,-8508""Extended"="""NoWorkingDirectory"="""HideBasedOnVelocityId"=-"ShowBasedOnVelocityId"=dword:00639bc8</code></pre><h2 id="2-操作中的步骤"><a href="#2-操作中的步骤" class="headerlink" title="2. 操作中的步骤"></a>2. 操作中的步骤</h2><h3 id="第一步-打开注册表编辑器"><a href="#第一步-打开注册表编辑器" class="headerlink" title="第一步 打开注册表编辑器"></a>第一步 打开注册表编辑器</h3><ul><li>“Win + R” 打开快速启动窗口 </li><li>输入 regedit 确定打开注册表编辑器</li></ul><h3 id="找到对应的注册表项"><a href="#找到对应的注册表项" class="headerlink" title="找到对应的注册表项"></a>找到对应的注册表项</h3><ul><li>在注册表路径输入<code>HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell</code>快速定位到注册表项</li></ul><p><img src="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/1557199409413.png" alt="1557199409413"></p><ul><li>修改权限：</li></ul><h2 id="3-开始按钮-Win键-X-默认修改"><a href="#3-开始按钮-Win键-X-默认修改" class="headerlink" title="3.开始按钮 Win键+X 默认修改"></a>3.开始按钮 Win键+X 默认修改</h2><p>从Win10 Build 14971开始，微软就开始将Powershell取代CMD成为主命令Shell，取代的决心非常显著，但微软也提供了折衷的解决方案，通过“设置——个性化——任务栏”，关闭以下功能即可回到此前状态。但在最新的版本中，目前该选项只能控制右击开始按钮的功能选项，无法还原右键菜单，所以感到不习惯的朋友不妨参照以上方法设置下。</p><p><img src="/2019/05/07/ruan-jian-gong-ju/windows/win10-powershell2cmd/1557199097206.png" alt="1557199097206"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3.0 初体验</title>
      <link href="/2019/05/05/qian-duan/vue-cli3/"/>
      <url>/2019/05/05/qian-duan/vue-cli3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">官方介绍</a>:</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell"># 1.旧版本Vue CLI 的包名称由 `vue-cli` 改成了 `@vue/cli`。 如果你已经全局安装了旧版本的 `vue-cli`(1.x 或 2.x)，你需要先通过 `npm uninstall vue-cli -g` 或 `yarn global remove vue-cli` 卸载它。# Node 版本要求Vue CLI 需要 [Node.js](https://nodejs.org/) 8.9 或更高版本 (推荐 8.11.0+)。# 可以使用下列任一命令安装这个新的包：npm install -g @vue/cli# ORyarn global add @vue/cli# 检查其版本vue --versionvue -V# 查看当前已安装版本、查看最新版本vue --versionvue -V# npm 查看模块全部版本：npm show @vue/clinpm show @vue/cli versionsnpm info @vue/cli versionsnpm view @vue/cli versions# 安装指定版本:npm install -g @vue/clinpm install -g @vue/cli@3.7.0</code></pre><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目:"></a>创建项目:</h2><h3 id="1-命令行创建"><a href="#1-命令行创建" class="headerlink" title="1.命令行创建"></a>1.命令行创建</h3><pre class=" language-shell"><code class="language-shell">vue create my-vue-cli3</code></pre><h3 id="2-选择模板"><a href="#2-选择模板" class="headerlink" title="2.选择模板"></a>2.选择模板</h3><ul><li>一开始只有两个选项: default (默认配置)和 Manually select features (手动配置) </li><li>在每次选择手动配置之后，会询问你是否保存配置，保存后，以后我们在进行创建项目的时候 只需使用原先的配置 就可以了，而不用再进行配置。</li></ul><pre class=" language-shell"><code class="language-shell">Vue CLI v3.7.0? Please pick a preset: (Use arrow keys)> default (babel, eslint)  Manually select features</code></pre><p>这里选手动</p><h3 id="3-选择配置"><a href="#3-选择配置" class="headerlink" title="3.选择配置"></a>3.选择配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检查项目所需的功能:(按&lt;space>选择，&lt;a>切换所有，&lt;i>反转选择）</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Babel <span class="token punctuation">(</span> <span class="token punctuation">)</span> TypeScript  <span class="token comment" spellcheck="true">// 支持使用 TypeScript 书写源码</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Progressive Web App <span class="token punctuation">(</span>PWA<span class="token punctuation">)</span> Support  <span class="token comment" spellcheck="true">// PWA 支持</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Router      <span class="token comment" spellcheck="true">// 支持 vue-router</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Vuex        <span class="token comment" spellcheck="true">// 支持 vuex</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> CSS Pre<span class="token operator">-</span>processors  <span class="token comment" spellcheck="true">// 支持 CSS 预处理器。</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Linter <span class="token operator">/</span> Formatter  <span class="token comment" spellcheck="true">// 支持代码风格检查和格式化</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Unit Testing  <span class="token comment" spellcheck="true">// 支持单元测试</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> E2E Testing</code></pre><ul><li>选择：Babel+Router+Vuex+CSS Pre-processors+Linter / Formatter+Unit Testing</li></ul><h3 id="4-是否使用路由的-history-模式"><a href="#4-是否使用路由的-history-模式" class="headerlink" title="4.是否使用路由的 history 模式"></a>4.是否使用路由的 history 模式</h3><ul><li>这里我建议选No，这样打包出来丢到服务器上可以直接使用了，后期要用的话，也可以自己再开起来。</li><li>选yes的话需要服务器那边再进行设置。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> CSS Pre<span class="token operator">-</span>processors<span class="token punctuation">,</span> Linter<span class="token punctuation">,</span> Unit<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback <span class="token keyword">in</span> production<span class="token punctuation">)</span> <span class="token punctuation">(</span>Y<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由使用history模式?(在生产环境中需要适当的服务器设置以备索引)</span></code></pre><p>选择: no</p><h3 id="5-选择css预处理器"><a href="#5-选择css预处理器" class="headerlink" title="5.选择css预处理器"></a>5.选择css预处理器</h3><ul><li>如果你选择了Css预处理器选项，会让你选择这个</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a CSS pre<span class="token operator">-</span>processor <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and CSS Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择CSS预处理器（默认支持PostCSS，Autoprefixer和CSS模块）：</span><span class="token operator">></span> Sass<span class="token operator">/</span>SCSS <span class="token punctuation">(</span><span class="token keyword">with</span> dart<span class="token operator">-</span>sass<span class="token punctuation">)</span>  Sass<span class="token operator">/</span>SCSS <span class="token punctuation">(</span><span class="token keyword">with</span> node<span class="token operator">-</span>sass<span class="token punctuation">)</span>  Less  Stylus</code></pre><p>选择: Less</p><h3 id="6-选择Eslint代码验证规则"><a href="#6-选择Eslint代码验证规则" class="headerlink" title="6.选择Eslint代码验证规则"></a>6.选择Eslint代码验证规则</h3><p>选择Eslint代码验证规则：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a linter <span class="token operator">/</span> formatter config<span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> ESLint <span class="token keyword">with</span> error prevention only  ESLint <span class="token operator">+</span> Airbnb config  ESLint <span class="token operator">+</span> Standard config  ESLint <span class="token operator">+</span> Prettier</code></pre><p>ESLint + Standard config 或 默认</p><h3 id="7-选择什么时候进行代码规则检测"><a href="#7-选择什么时候进行代码规则检测" class="headerlink" title="7.选择什么时候进行代码规则检测"></a>7.选择什么时候进行代码规则检测</h3><ul><li>建议选保存就检测，等到commit的时候，问题可能都已经积累很多了。</li><li>之前写了篇 VsCode保存时自动修复Eslint错误 推荐一下。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick additional lint features<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Lint on save  <span class="token comment" spellcheck="true">// 保存就检测</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Lint and fix on commit <span class="token comment" spellcheck="true">// fix和commit时候检查</span></code></pre><h3 id="8-选择e2e测试"><a href="#8-选择e2e测试" class="headerlink" title="8.选择e2e测试"></a>8.选择e2e测试</h3><p>单元测试</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>e2e测试</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick a E2E testing solution<span class="token punctuation">:</span><span class="token operator">></span> Cypress <span class="token punctuation">(</span>Chrome only<span class="token punctuation">)</span>  Nightwatch <span class="token punctuation">(</span>Selenium<span class="token operator">-</span>based<span class="token punctuation">)</span></code></pre><h3 id="9-把babel-postcss-eslint这些配置文件放哪"><a href="#9-把babel-postcss-eslint这些配置文件放哪" class="headerlink" title="9.把babel,postcss,eslint这些配置文件放哪"></a>9.把babel,postcss,eslint这些配置文件放哪</h3><ul><li>通常我们会选择独立放置，让package.json干净些</li></ul><blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">?</span> Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel<span class="token punctuation">,</span> PostCSS<span class="token punctuation">,</span> ESLint<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>? <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> In dedicated config files <span class="token comment" spellcheck="true">// 独立文件放置</span>  In <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">// 放package.json里</span></code></pre></blockquote><h3 id="10-是否保存配置"><a href="#10-是否保存配置" class="headerlink" title="10.是否保存配置"></a>10.是否保存配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Save <span class="token keyword">this</span> <span class="token keyword">as</span> a preset <span class="token keyword">for</span> future projects<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span>N<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 是否记录一下以便下次继续使用这套配置</span><span class="token comment" spellcheck="true">// 选保存之后，会让你写一个配置的名字：</span>Save preset <span class="token keyword">as</span><span class="token punctuation">:</span> name <span class="token comment" spellcheck="true">// 然后你下次进入配置可以直接使用你这次的配置了</span></code></pre><ol><li>下载依赖</li><li>webpack配置的目录不见了：</li></ol><p>会发现2.x的webpack配置的目录不见了，也就是没有build、config这两个文件夹了：</p><p>这种方式的优势 对小白来说非常友好 ，不会一上来就两个文件夹，一堆文件，看着脑袋都大了。</p><p>然后在 引用 抄 别人的配置的时候，也非常方便 ，直接将文件复制过来就好了。</p><p>在自定义一下webpack的配置，我们需要在 根目录新建一个 vue.config.js 文件 ，文件中应该导出一个对象，然后进行配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 选项...</span> <span class="token punctuation">}</span></code></pre><p>还有一些小变动像：static文件夹改为public了，router文件夹变成了单个文件之类的</p><h3 id="11-使用哪种包管理工具"><a href="#11-使用哪种包管理工具" class="headerlink" title="11.使用哪种包管理工具"></a>11.使用哪种包管理工具</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">?</span> Pick the <span class="token keyword">package</span> manager to use when installing dependencies<span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> Use Yarn  Use NPM</code></pre><h3 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h3><p>启动项目：npm run serve // 不是之前的 npm run dev</p><h2 id="vue-cli不再纠结devDependencies与dependencies"><a href="#vue-cli不再纠结devDependencies与dependencies" class="headerlink" title="vue-cli不再纠结devDependencies与dependencies"></a>vue-cli不再纠结devDependencies与dependencies</h2><ul><li><p>以前一直在纠结一个npm安装的包依赖管理的问题。是这样的：</p><p>我们在使用npm install 安装模块或插件的时候，有两种命令把他们写入到 package.json 文件里面去，他们是：</p><p>–save-dev 或 –save</p><p>首先需要说明的是Dependencies一词的中文意思是依赖和附属的意思，而dev则是develop（开发）的简写。</p><p>所以它们的区别在 package.json 文件里面体现出来的就是，使用 –save-dev 安装的 插件，被写入到 devDependencies 域里面去，而使用 –save 安装的插件，则是被写入到 dependencies 区块里面去。</p></li><li><p>那 package.json 文件里面的 devDependencies  和 dependencies 对象有什么区别呢？</p><p>devDependencies  里面的插件只用于开发环境，不用于生产环境，而 dependencies  是需要发布到生产环境的。</p><p>比如我们写一个项目要依赖于jQuery，没有这个包的依赖运行就会报错，这时候就把这个依赖写入dependencies ；</p><p>而我们使用的一些构建工具比如glup、webpack这些只是在开发中使用的包，上线以</p><p>后就和他们没关系了，所以将它写入devDependencies。<br>-——————–<br>作者：zDeer的前端之旅<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/zdeer520/article/details/73431295" target="_blank" rel="noopener">https://blog.csdn.net/zdeer520/article/details/73431295 </a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p></li></ul><h2 id="项目常用配置"><a href="#项目常用配置" class="headerlink" title="项目常用配置"></a>项目常用配置</h2><h3 id="eslintrc-js-修改"><a href="#eslintrc-js-修改" class="headerlink" title=".eslintrc.js 修改"></a>.eslintrc.js 修改</h3><pre class=" language-java"><code class="language-java">  rules<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">'no-console'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'generator-star-spacing'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"semi"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 语句强制分号结尾</span>    <span class="token string">"space-before-function-paren"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"no-return-assign"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// return 语句中不能有赋值表达式</span>    <span class="token string">"one-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-dupe-keys"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-cond-assign"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"no-tabs"</span><span class="token operator">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-mixed-spaces-and-tabs"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//关闭 tabs与空格共同存在时的验证报错</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="vue-config-js-创建"><a href="#vue-config-js-创建" class="headerlink" title="vue.config.js 创建"></a>vue.config.js 创建</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'./'</span> <span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  outputDir<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span>  assetsDir<span class="token punctuation">:</span> <span class="token string">'assets'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用于放置生成的静态资源</span>  filenameHashing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设为false 来关闭文件名哈希</span>  pages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token punctuation">{</span>      entry<span class="token punctuation">:</span> <span class="token string">'src/main.js'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      title<span class="token punctuation">:</span> <span class="token string">'Index Page'</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'chunk-vendors'</span><span class="token punctuation">,</span> <span class="token string">'chunk-common'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置自动启动浏览器   process.platform === 'darwin'</span>    hotOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// proxy: 'http://192.168.10.100:9000', // string | Object 配置跨越处理代理</span>    <span class="token comment" spellcheck="true">// proxy: {</span>    <span class="token comment" spellcheck="true">//   // arcgis js api代理 正式环境拷贝api到/dist/static/arcgis_js_api</span>    <span class="token comment" spellcheck="true">//   '/static/arcgis_js_api': {</span>    <span class="token comment" spellcheck="true">//     target: 'http://192.168.10.26:88',</span>    <span class="token comment" spellcheck="true">//     changeOrigin: true,</span>    <span class="token comment" spellcheck="true">//     pathRewrite: {</span>    <span class="token comment" spellcheck="true">//       '^/static/arcgis_js_api': '/arcgis_js_api' // 访问 /static/arcgis_js_api => http://192.168.10.26/arcgis_js_api</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//   },</span>    <span class="token comment" spellcheck="true">//   '/': {</span>    <span class="token comment" spellcheck="true">//     target: 'http://192.168.10.111:9000',</span>    <span class="token comment" spellcheck="true">//     // target: 'http://192.168.30.208:9000',</span>    <span class="token comment" spellcheck="true">//     changeOrigin: true,</span>    <span class="token comment" spellcheck="true">//     ws: false,</span>    <span class="token comment" spellcheck="true">//     pathRewrite: {</span>    <span class="token comment" spellcheck="true">//       '^/': ''</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//   }</span>    <span class="token comment" spellcheck="true">// },</span>    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>      warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      less<span class="token punctuation">:</span> <span class="token punctuation">{</span>        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 解决 webpack打包时报错提示：“Inline JavaScript is not enabled”</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>      extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.css'</span><span class="token punctuation">,</span> <span class="token string">'.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// '@: 'src';   // vue-cli3.0 默认配置</span>        store<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/store/modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        storejs<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'node_modules/store'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'src/styles'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 第三方插件配置</span>  pluginOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  runtimeCompiler<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否使用包含运行时编译器的 Vue 构建版本</span>  lintOnSave<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token comment" spellcheck="true">// 在生产构建时禁用 eslint-loader</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="使用-pug"><a href="#使用-pug" class="headerlink" title="使用 pug"></a>使用 pug</h3><p>要注意的一点是: 标签后面如果有属性(括号内的) 他和括号之间不要加空格,加了空格就会被当成字符串解析,详细可查看<a href="https://pugjs.org/zh-cn" target="_blank" rel="noopener">官方文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue-cli 3 配置:</span><span class="token comment" spellcheck="true">// 由于 cli 升级到3了,相关配置发生了很大的改变,所以要和2的更改不同</span>cnpm i <span class="token operator">-</span>D pug pug<span class="token operator">-</span>html<span class="token operator">-</span>loader pug<span class="token operator">-</span>plain<span class="token operator">-</span>loader<span class="token comment" spellcheck="true">// 和2比多了一个 pug-plain-loader</span><span class="token comment" spellcheck="true">// 以下配置可以不要</span><span class="token comment" spellcheck="true">/**// 在 vue.config.js (如果没有就在根目录下新建一个) 添加代码:module.exports = {    chainWebpack: config => {        config.module.rule('pug')            .test(/\.pug$/)            .use('pug-html-loader')            .loader('pug-html-loader')            .end()    }}*/</span><span class="token comment" spellcheck="true">// vue-cli 2+ 配置:</span><span class="token comment" spellcheck="true">// 下载包:</span>npm i <span class="token operator">-</span>D pug pug<span class="token operator">-</span>html<span class="token operator">-</span>loader<span class="token comment" spellcheck="true">// 在build/webpack.base.conf.js 的 module 中添加规则:</span> module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span><span class="token regex">/\.pug$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">"pug-html-loader"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 省略其他规则</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Animate.css 一款强大的预设css3动画库</span>cnpm i <span class="token operator">-</span>S animate<span class="token punctuation">.</span>css <span class="token operator">=</span><span class="token operator">></span> cnpm install animate<span class="token punctuation">.</span>css <span class="token operator">--</span>save 写入dependenciesyarn add animate<span class="token punctuation">.</span>css<span class="token comment" spellcheck="true">// mint-ui</span><span class="token comment" spellcheck="true">// 依赖pug</span>yarn add <span class="token operator">-</span>D pug pug<span class="token operator">-</span>parsercnpm i <span class="token operator">-</span>S mint<span class="token operator">-</span>uiyarn add mint<span class="token operator">-</span>ui<span class="token comment" spellcheck="true">// moment</span>cnpm i <span class="token operator">-</span>S momentyarn add moment<span class="token comment" spellcheck="true">// vue-amap</span><span class="token comment" spellcheck="true">// warning vue-amap@0.5.9: The engine "core-js" appears to be invalid</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>amapyarn add vue<span class="token operator">-</span>amapyarn add core<span class="token operator">-</span>js<span class="token comment" spellcheck="true">// vue-baidu-map</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>baidu<span class="token operator">-</span>mapyarn add vue<span class="token operator">-</span>baidu<span class="token operator">-</span>map<span class="token comment" spellcheck="true">// vue-mobile-calendar</span>cnpm i <span class="token operator">-</span>S vue<span class="token operator">-</span>mobile<span class="token operator">-</span>calendaryarn add vue<span class="token operator">-</span>mobile<span class="token operator">-</span>calendar<span class="token comment" spellcheck="true">// axios</span>cnpm i <span class="token operator">-</span>D axios <span class="token operator">=</span><span class="token operator">></span> cnpm install axios <span class="token operator">--</span>save<span class="token operator">-</span>dev 写入devDependenciesyarn add <span class="token operator">-</span>D axios<span class="token comment" spellcheck="true">// vue-echarts</span>yarn add <span class="token operator">-</span>D vue<span class="token operator">-</span>echartsyarn add echarts<span class="token comment" spellcheck="true">// lodash</span>cnpm i <span class="token operator">-</span>S lodashyarn add lodash<span class="token comment" spellcheck="true">// less-loader@4.1.0" has unmet peer dependency "webpack@^2.0.0 || ^3.0.0 || ^4.0.0".</span>yarn add <span class="token operator">-</span>D webpack<span class="token comment" spellcheck="true">// css-loader</span>yarn add <span class="token operator">-</span>D css<span class="token operator">-</span>loader</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Java面试-Offer直通车 01.导学 06.JVM</title>
      <link href="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/"/>
      <url>/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指Java面试-Offer直通车"><a href="#剑指Java面试-Offer直通车" class="headerlink" title="剑指Java面试-Offer直通车"></a>剑指Java面试-Offer直通车</h1><p>@xiangzepro</p><h2 id="1-剑指Java面试-导学"><a href="#1-剑指Java面试-导学" class="headerlink" title="1. 剑指Java面试-导学"></a>1. 剑指Java面试-导学</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 现状：</span>缩减招聘人数（bat一线互联网大厂缩减招聘人数）毕业生增长企业内部 <span class="token punctuation">(</span>末位淘汰、优胜劣汰 的用人机制<span class="token punctuation">)</span>就业门槛更高 企业对人才要求也更高<span class="token comment" spellcheck="true">// 规划</span>小白<span class="token operator">/</span>初级工程师 <span class="token operator">=</span><span class="token operator">></span> 独挡一面甚至多面的高工专辑<span class="token number">1</span><span class="token punctuation">.</span>项目驱动学习，积累项目经验，独立完成前后端全栈的项目开发专辑<span class="token number">2</span><span class="token punctuation">.</span>分析归纳面试热点，功克Java面试，完善备战面试体系未来专辑 未来专辑<span class="token number">1</span><span class="token operator">:</span>归纳项目面试的微课，解决项目面试无从会的痛点未来专辑 未来专辑<span class="token number">2</span><span class="token operator">:</span>深入分析主流框架Spring的源码，并着手编写框架</code></pre><h3 id="课程导学"><a href="#课程导学" class="headerlink" title="课程导学"></a>课程导学</h3><p>由五个部分组成</p><ul><li>内容概述</li><li>学习门槛和适用人群</li><li>如何最大化利用好本门课程</li><li>JDK版本的选择</li><li>战前动员</li></ul><h3 id="1-1-课程概述"><a href="#1-1-课程概述" class="headerlink" title="1.1 课程概述"></a>1.1 课程概述</h3><ul><li>凝结了一线资深开发工程师的心血。</li><li>包含JVM底层知识、Java垃圾回收、多线程、常用类库、常考算法和数据结构、框架、缓存、网络、Linux操作系统、调优等高频考点，以及一些面试技巧和软技能点拨。</li></ul><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c1e38940001adc512800720.jpg" alt="课程概述"></p><h4 id="Java基础考点："><a href="#Java基础考点：" class="headerlink" title="Java基础考点："></a>Java基础考点：</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5cb194510001b37912800720.jpg" alt="Java基础考点"></p><h4 id="如何应对如此多的考点："><a href="#如何应对如此多的考点：" class="headerlink" title="如何应对如此多的考点："></a>如何应对如此多的考点：</h4><ul><li>面试官知识储备有限</li><li>考点频率不同、可以因地制宜地缩小备战范围</li><li>剥离出不变的通用知识点，以不变应万变</li><li>平时注意多积累</li></ul><h3 id="1-2-学习门槛和适用人群"><a href="#1-2-学习门槛和适用人群" class="headerlink" title="1.2 学习门槛和适用人群"></a>1.2 学习门槛和适用人群</h3><h4 id="门槛较低，适用范围较广"><a href="#门槛较低，适用范围较广" class="headerlink" title="门槛较低，适用范围较广"></a>门槛较低，适用范围较广</h4><ul><li>具备Java语言编程基础，最好了解些数据库、网络知识</li><li>适合有工作经验或者项目实战经验的想北站备战面试的同学</li><li>也适合对自己有高标准、高要求的同学</li></ul><h3 id="1-3-如何最大化利用好本门课程"><a href="#1-3-如何最大化利用好本门课程" class="headerlink" title="1.3 如何最大化利用好本门课程"></a>1.3 如何最大化利用好本门课程</h3><ul><li>合理利用检索引擎(Google、Baidu)，培养主动解决问题的能力，常识加深和扩展自己的知识面，锻炼独立填坑的能力。</li><li>尽量问与本门课程内容相关的问题，并提供足够的信息方便定位。</li></ul><h3 id="1-4-JDK版本的选择"><a href="#1-4-JDK版本的选择" class="headerlink" title="1.4 JDK版本的选择"></a>1.4 JDK版本的选择</h3><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c1cf5ad0001c88e12800720.jpg" alt="JDK版本的选择"></p><p>查看每个版本的维护时间</p><p>JDK8 和 JDK11 是长期支持的版本，分别支持到2025、2026年。（JDK9、JDK10只是过渡版本，只提供半年技术支持）</p><h3 id="1-5-战前"><a href="#1-5-战前" class="headerlink" title="1.5 战前"></a>1.5 战前</h3><ul><li>面试并非只争朝夕，需要注重积累。</li></ul><h2 id="6-剑指Java面试-Java底层知识：JVM"><a href="#6-剑指Java面试-Java底层知识：JVM" class="headerlink" title="6. 剑指Java面试-Java底层知识：JVM"></a>6. 剑指Java面试-Java底层知识：JVM</h2><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/6-1.java基础考点.jpg" alt="java基础考点"></p><pre class=" language-java"><code class="language-java">JavaEE基础  打包 WAR\EAR  基础 MVC Servlets JSPs  APIs JPA JAX<span class="token operator">-</span>WS内部<span class="token operator">/</span>内嵌类访问权限修饰词APIsOOPs线程集合JVM异常</code></pre><h3 id="6-1-谈谈你对Java的理解"><a href="#6-1-谈谈你对Java的理解" class="headerlink" title="6.1 谈谈你对Java的理解"></a>6.1 谈谈你对Java的理解</h3><h4 id="Java的语言特点"><a href="#Java的语言特点" class="headerlink" title="Java的语言特点"></a>Java的语言特点</h4><ol><li>平台无关性   跨平台，一次编译，到处运行</li><li>GC机制     垃圾回收机制：不用手动释放内存</li><li>语言特性   泛型、反射、lamda表达式</li><li>面向对象   封装、继承、多态</li><li>类库   集合、并发库、网络库、IO、NIO等</li><li>异常处理</li></ol><h3 id="6-2-平台无关性的实现"><a href="#6-2-平台无关性的实现" class="headerlink" title="6.2 平台无关性的实现"></a>6.2 平台无关性的实现</h3><h4 id="Compile-Once-Run-Anywhere如何实现"><a href="#Compile-Once-Run-Anywhere如何实现" class="headerlink" title="Compile Once, Run Anywhere如何实现"></a>Compile Once, Run Anywhere如何实现</h4><p>答：图片中</p><h4 id="1-编译运行"><a href="#1-编译运行" class="headerlink" title="1. 编译运行"></a>1. 编译运行</h4><p>javac指令，用来编译java的源码，即将源码编译生成字节码，存入到对应的.class文件当中，其会对程序的语法、句法以及一些语义进行检查。.class文件保存的就是java文件翻译成的二进制字节码，即java类文件中的属性、方法以及类中的常量信息都会被分别存储在class文件中。还会添加一个公有的静态常量属性.class，这个属性记录了类的相关信息及类型信息，是class的一个实例。</p><h4 id="2-javap指令"><a href="#2-javap指令" class="headerlink" title="2. javap指令"></a>2. javap指令</h4><p>是java自带的反汇编器，可以查看java编译器生成的字节码。通过比较字 节码和源代码，我们可以发现很多问题。“javap -c”对代码进行反汇编。</p><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c91a8210001319219201080.jpg" alt="Compile Once, Run Anywhere如何实现"></p><pre class=" language-java"><code class="language-java">javac com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ByteCodeSample<span class="token punctuation">.</span>javajavac <span class="token operator">-</span>encoding utf<span class="token operator">-</span><span class="token number">8</span> com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ByteCodeSample<span class="token punctuation">.</span>javajava com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSamplejavap <span class="token operator">-</span>helpjavap <span class="token operator">-</span>c com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample<span class="token comment" spellcheck="true">// 参考：通过javap命令分析java汇编指令：https://www.jianshu.com/p/6a8997560b05</span>Compiled from <span class="token string">"ByteCodeSample.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// java默认的无参构造函数 => 当我们不指定类的构造函数 编译器会为我们创建一个不带参数的构造函数</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span><span class="token function">ByteCodeSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0    <span class="token comment" spellcheck="true">//对diss?进行操作//从本地变量表中加载索引为0的变量的值，也即this的引用，压入栈</span>       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V //出栈，调用java/lang/Object."&lt;init>":()V 初始化对象，就是this指定的对象的init()方法完成初始化</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> iconst_1 <span class="token comment" spellcheck="true">// 对栈操作 把常亮1放入栈顶</span>       <span class="token number">1</span><span class="token operator">:</span> istore_1 <span class="token comment" spellcheck="true">// 将栈顶的值放入局部变量1中（就是第一个变量i中）</span>       <span class="token number">2</span><span class="token operator">:</span> iconst_5 <span class="token comment" spellcheck="true">// 把常亮5放入栈顶</span>       <span class="token number">3</span><span class="token operator">:</span> istore_2 <span class="token comment" spellcheck="true">// 将栈顶的值5放入局部变量2中（也就是变量j中）</span>       <span class="token number">4</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> （将变量<span class="token function">1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>）       <span class="token number">7</span><span class="token operator">:</span> iinc          <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> （将变量<span class="token function">2</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>）      <span class="token number">10</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream; //获取PrintStream的静态域 需要打印所以需要获取</span>      <span class="token number">13</span><span class="token operator">:</span> iload_1  <span class="token comment" spellcheck="true">// 将PrintStream对象 将其压入栈顶，将本地变量i的值推送到栈顶</span>      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(I)V // 调用PrintStream的println方法，去打印第一个变量的值（i）</span>      <span class="token number">17</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream;</span>      <span class="token number">20</span><span class="token operator">:</span> iload_2      <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(I)V</span>      <span class="token number">24</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在linux中操作</span><span class="token comment" spellcheck="true">// 上传</span>scp ByteCodeSample<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">root</span><span class="token annotation punctuation">@192</span><span class="token punctuation">.</span><span class="token number">168</span><span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token operator">~</span><span class="token comment" spellcheck="true">// 创建文件夹 复制 运行</span>mkdir <span class="token operator">-</span>p com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>cp ByteCodeSample<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">com</span><span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>ls com<span class="token operator">/</span>wt<span class="token operator">/</span>javabasic<span class="token operator">/</span>bytecode<span class="token operator">/</span>java com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ByteCodeSample</code></pre><p>ByteCodeSample.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>bytecode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCodeSample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    j<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="回答："><a href="#回答：" class="headerlink" title="回答："></a>回答：</h4><p>java文件首先经过javac编译生成字节码。将字节码保存在.class文件中。.class文件是跨平台的基础。<br>由不同平台的JVM进行解析，java语言在不同的平台上运行时不需要进行重新编译，java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p><h4 id="3-为什么JVM不直接将源码解析成机器码去执行"><a href="#3-为什么JVM不直接将源码解析成机器码去执行" class="headerlink" title="3. 为什么JVM不直接将源码解析成机器码去执行"></a>3. 为什么JVM不直接将源码解析成机器码去执行</h4><ul><li><p>准备工作：每次执行都要进行语法，句法的检查。</p><p>使用javac编译成字节码之后,多次执行也2、不需要再校验和补全了。</p></li><li><p>兼容性：也可以将别的语言解析成字节码。(可以由别的语言（例如ruby、scala）生成字节码。同样可以被jvm调用执行，也可以增加平台的兼容扩展能力，符合软件设计的中庸之道)</p></li></ul><h3 id="6-3-JVM如何加载-class文件"><a href="#6-3-JVM如何加载-class文件" class="headerlink" title="6.3 JVM如何加载.class文件"></a>6.3 JVM如何加载.class文件</h3><h4 id="1-Java虚拟机"><a href="#1-Java虚拟机" class="headerlink" title="1. Java虚拟机"></a>1. Java虚拟机</h4><ul><li>是抽象化的计算机，通过在实际的计算机上个仿真模拟计算机功能来实现的，JVM有自己完善的硬件架构：处理器，堆栈，寄存器等，还具有相应的指令系统，JVM 屏蔽了与具体操作系统平台相关的信息，使得java程序只需要生成在Java虚拟机上运行的字节码，就可以在不同平台上不加修改的运行。（一般我们不需要知道虚拟机的运行原理，只要专注于写java代码就可以了，这也正是虚拟机之所以存在的原因，就是屏蔽底层操作系统平台的不同，并减少基于原生语言开发的复杂性，只需要虚拟机厂商在特定操作系统上定义如何将字节码解析成本操作系统可执行的二进制码，java这项语言就能实现跨越各种平台） 对于jvm最值得我们学习两点：JVM内存结构模型，GC。（既是面试的重点，更是程序调优的关键）</li><li>JVM是内存中的虚拟机，JVM的存储就是内存，所有写的 类，常量，变量，方法都在内存中这决定着程序的健壮和高效。</li><li>JVM由Class Loader、Runtime Data Area、Execution Engine、Native Interface组成。</li></ul><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c6aa33a0001836e19201080.jpg" alt="JVM如何加载.class文件"></p><p>简要回答：</p><p>JVM主要由Class Loader、Runtime Data Area、Execution Engine、Native Interface这四个部分组成，它主要通过Class Loader将符合特定格式要求的class文件加载到内存里，并通过Execution Engine去解析class文件中的字节码，并提交给操作系统去执行。</p><p>Native Interface:（既本地接口） 融合不同开发语言的原生库为Java所用。（不管我们如何吹嘘java，它得执行性能，在绝大多数情况下并没有c或者c++高，主流的jvm也是基于c++去实现的，因此在涉及到一些需要较高执行性能的运算操作的时候，是需要java直接调用它们的。此外在本着不重复造轮子的原则，在实际生产中，某个库如果已经用到别的语言进行开发了，我们就不需要再开发一套，而是希望java能够对这些库进行调用。为了满足上述需求，jvm在内存中专门开辟了一块区域处理标记为native的代码，他的具体做法是native methed中登记native方法，在Execution执行时，加载native Library）</p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wt.javabasic.bytecode.ByteCodeSample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =></span><span class="token annotation punctuation">@CallerSensitive</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">forName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span>                <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">forName0</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// =></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">forName0</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> initialize<span class="token punctuation">,</span>                                            ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">;</span></code></pre><p>Runtime Data Area: JVM内存空间结构模型。（我们缩写的程序 都会被加载到这里，之后再开始运行，该结构模型的设计，堪称神做）</p><h3 id="6-4-什么是反射"><a href="#6-4-什么是反射" class="headerlink" title="6.4 什么是反射"></a>6.4 什么是反射</h3><h4 id="1-问：有没有了解过java的反射"><a href="#1-问：有没有了解过java的反射" class="headerlink" title="1. 问：有没有了解过java的反射"></a>1. 问：有没有了解过java的反射</h4><p>回答：java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它得任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h4 id="2-写一个反射的例子"><a href="#2-写一个反射的例子" class="headerlink" title="2. 写一个反射的例子"></a>2. 写一个反射的例子</h4><h5 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Robot</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>String helloSentence<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloSentence <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">throwHello</span><span class="token punctuation">(</span>String tag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> tag<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="ReflectSample"><a href="#ReflectSample" class="headerlink" title="ReflectSample"></a>ReflectSample</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wt<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectSample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class <span class="token class-name">rc</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.wt.javabasic.reflect.Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Robot r <span class="token operator">=</span> <span class="token punctuation">(</span>Robot<span class="token punctuation">)</span> rc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class name is "</span> <span class="token operator">+</span> rc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// r.sayHi("zhangsan");</span>      <span class="token comment" spellcheck="true">// getDeclaredMethod可以获取 public protected private或者包类型的方法和属性，不能获取继承的方法(和实现接口的方法)</span>      Method getHello <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"throwHello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      getHello<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Object str <span class="token operator">=</span> getHello<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHello result is "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// getMethod可以获取public方法 包括继承的方法和实现接口的方法</span>      Method sayHi <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Field nameField <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>getDeclaredMethod 可以获取该类自有的所有的方法，但不能获取继承自父类的或者实现自接口的方法。</li><li>getMethod 只能获取该类的public方法，但是它能获取继承自父类的或者实现自接口的方法。</li><li>getHello 方法是私有的，所以在调用前要将其Accessible设置为true。</li></ul><h3 id="6-5-ClassLoader"><a href="#6-5-ClassLoader" class="headerlink" title="6.5 ClassLoader"></a>6.5 ClassLoader</h3><h4 id="1-类从编译到执行的过程"><a href="#1-类从编译到执行的过程" class="headerlink" title="1. 类从编译到执行的过程"></a>1. 类从编译到执行的过程</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c2735920001e3bc19201080.jpg" alt="类从编译到执行的过程"></p><h4 id="2-谈谈ClassLoader"><a href="#2-谈谈ClassLoader" class="headerlink" title="2. 谈谈ClassLoader"></a>2. 谈谈ClassLoader</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c41e499000131fc19201080.jpg" alt="谈谈ClassLoader"></p><h4 id="3-种类"><a href="#3-种类" class="headerlink" title="3. 种类"></a>3. 种类</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c556699000168fa19201080.jpg" alt="种类"></p><ul><li>BootStrapClassLoader: C++编写，加载核心库 java.* (通常核心类class被签名，不能被替换掉，他是有jvm内核实现的，在主流java虚拟机是由c++实现的)</li><li>ExtClassLoader: Java编写，加载扩展库 javax.* （用户可以自己定义类在这个目录下，通过这个ExtClassLoader去加载）</li><li>AppClassLoader: Java编写，加载程序所在目录 （加载classpath下的内容）</li><li>自定义ClassLoader: Java编写，定制化加载</li></ul><h4 id="4-自定义ClassLoader的实现"><a href="#4-自定义ClassLoader的实现" class="headerlink" title="4. 自定义ClassLoader的实现"></a>4. 自定义ClassLoader的实现</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c41e8da0001658719201080.jpg" alt="自定义ClassLoader的实现"></p><h3 id="6-6-ClassLoader的双亲委派机制"><a href="#6-6-ClassLoader的双亲委派机制" class="headerlink" title="6.6 ClassLoader的双亲委派机制"></a>6.6 ClassLoader的双亲委派机制</h3><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5cac56b7000199fa19201080.jpg" alt="ClassLoader的双亲委派机制"></p><h4 id="1-查看openJDK源码"><a href="#1-查看openJDK源码" class="headerlink" title="1. 查看openJDK源码"></a>1. 查看openJDK源码</h4><p>为什么查看openjdk，因为JDK部分代码闭源，对外公布的代码要看openJDK的代码。Linux上经常用到openJDK，</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/</a></p><p>=&gt; browse =&gt; src =&gt; share(不依赖平台的代码) =&gt; /native/java/lang/ClassLoader.c</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/cecd70d27b27/src/share/native/java/lang/ClassLoader.c" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/cecd70d27b27/src/share/native/java/lang/ClassLoader.c</a></p><pre class=" language-c++"><code class="language-c++">/* * Returns NULL if class not found. */JNIEXPORT jclass JNICALLJava_java_lang_ClassLoader_findBootstrapClass(JNIEnv *env, jobject loader,                                              jstring classname)...    cls = JVM_FindClassFromBootLoader(env, clname); // 通过jvm调用BootLoader done:    if (clname != buf) {        free(clname);    }    return cls;}</code></pre><h4 id="2-为什么要使用双亲委派机制去加载类"><a href="#2-为什么要使用双亲委派机制去加载类" class="headerlink" title="2. 为什么要使用双亲委派机制去加载类"></a>2. 为什么要使用双亲委派机制去加载类</h4><ul><li>避免多分同样字节码的加载 (内存宝贵)</li></ul><h3 id="6-7-loadClass和forName的区别"><a href="#6-7-loadClass和forName的区别" class="headerlink" title="6.7 loadClass和forName的区别"></a>6.7 loadClass和forName的区别</h3><h4 id="1-类的加载方式："><a href="#1-类的加载方式：" class="headerlink" title="1. 类的加载方式："></a>1. 类的加载方式：</h4><ol><li>隐式加载：new</li><li>显示加载：loadClass以及forName等方法</li></ol><h4 id="2-类的装载过程："><a href="#2-类的装载过程：" class="headerlink" title="2.类的装载过程："></a>2.类的装载过程：</h4><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c285e070001c98b19201080.jpg" alt="loadClass和forName的区别"></p><p>区别：</p><p><img src="/2019/04/25/mian-shi/jian-zhi-java-mian-shi-01.06/5c28601300018d1919201080.jpg" alt="loadClass和forName的区别"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 后端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/2019/04/24/first-post/"/>
      <url>/2019/04/24/first-post/</url>
      
        <content type="html"><![CDATA[<p> 内容</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
